name: Build, push and deploy to k8s
on:
  release:
    types: [published, created, edited]

env:
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-01-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
  STORAGE_ACCOUNT_NAME: k8scovid
  NAMESPACE: web
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
jobs:
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
    - name: Generate build number
      uses: einaregilsson/build-number@v2 
      with:
        token: ${{secrets.github_token}}
    - name: Dotnet build
      env:
        BuildNumber: ${{ env.BUILD_NUMBER }}
      run: | 
           cd src/StatCan.OrchardCore.Cms.Web
           dotnet build --configuration Release
           dotnet publish -c Release -o ./.build/release
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    # Container build and push to a Azure Container registry (ACR)
    - run: |
        docker build -f Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/statcan-orchardcore:${{ env.BUILD_NUMBER }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/statcan-orchardcore:${{ env.BUILD_NUMBER }}
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    # Scan image for vulnerabilities
    - name: Scan image for vulnerabilities
      uses: docker://docker.io/aquasec/trivy:0.2.1
      with:
        args: --cache-dir /var/lib/trivy --severity CRITICAL --no-progress ${{ env.REGISTRY_NAME }}.azurecr.io/statcan-orchardcore:${{ env.BUILD_NUMBER }}
    # Clone the Helm chart
    - run: |
        git clone https://github.com/statcan/charts.git
        mkdir -p /home/runner/work/_temp/_github_home/
        cp $KUBECONFIG /home/runner/work/_temp/_github_home/KUBECONFIG
    # Deploy Helm chart
    - uses: 'sylus/helm@master'
      env:
        KUBECONFIG: /github/home/KUBECONFIG
      with:
        release: 'statcan-orchardcore'
        namespace: 'web'
        tiller-namespace: 'web'
        chart: './charts/stable/orchard-cms'
        token: '${{ github.token }}'
        values: |
          ingress:
            enabled: true
            hosts:
              - oc.covid.cloud.statcan.ca
            annotations: 
              kubernetes.io/ingress.class: "istio"
          image:
            tag: "${{ env.BUILD_NUMBER }}"
            pullPolicy: IfNotPresent
            environmentVariables:
              - name: ASPNETCORE_ENVIRONMENT
                value: production
            repository: "${{ env.REGISTRY_NAME }}.azurecr.io/statcan-orchardcore"
          global:
            postgresql:
              postgresqlUsername: "${{ secrets.POSTGRESQL_USER }}"
              postgresqlDatabase: "${{ secrets.POSTGRESQL_DATABASE }}
              postgresqlPassword: "${{ secrets.POSTGRESQL_PASSWORD }}
            imagePullSecrets:
              - "${{ env.REGISTRY_NAME }}-registry-connection"
          postgresql:
            image:
              tag: 11.5.0-debian-9-r1
              pullPolicy: IfNotPresent
              debug: false
            persistence:
              enabled: true
              size: 1Gi
          volumeClaim:
            enabled: true
            accessModes:
              - ReadWriteOnce
            size: 1Gi
            storageClass: default
