{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Statistics Canada OrchardCore Documentation \u00b6 Welcome to the StatCan.OrchardCore documentation. Learn how to use our collection of application and SaaS modules and components, and Themes for building your project. OrchardCore CMS \u00b6 The project is built on OrchardCore CMS version 1.0.0 . To learn more about the underlying framework, take a look through the Orchard Core CMS documentation and the Orchard Core Github repository . Where to Start? \u00b6 I want to: * To help contribute see the Getting Started guide * Set up a solution (e.g. website, application) quickly for my project and modify how it looks: Follow the Solution Templates guide","title":"Home"},{"location":"#statistics-canada-orchardcore-documentation","text":"Welcome to the StatCan.OrchardCore documentation. Learn how to use our collection of application and SaaS modules and components, and Themes for building your project.","title":"Statistics Canada OrchardCore Documentation"},{"location":"#orchardcore-cms","text":"The project is built on OrchardCore CMS version 1.0.0 . To learn more about the underlying framework, take a look through the Orchard Core CMS documentation and the Orchard Core Github repository .","title":"OrchardCore CMS"},{"location":"#where-to-start","text":"I want to: * To help contribute see the Getting Started guide * Set up a solution (e.g. website, application) quickly for my project and modify how it looks: Follow the Solution Templates guide","title":"Where to Start?"},{"location":"contact/","text":"Contact \u00b6 For any questions (e.g. development, OrchardCore etc.) feel free to ask us on our Community Discussion Q/A channel !","title":"Contact"},{"location":"contact/#contact","text":"For any questions (e.g. development, OrchardCore etc.) feel free to ask us on our Community Discussion Q/A channel !","title":"Contact"},{"location":"development/assets/","text":"Assets asset (css, js) files \u00b6 When adding / modifying assets, you should use the gulp script to transpile and copy the assets into the wwwroot folder. To install gulp, run npm install from the root of this solution. Use the npm run watch command to automatically rebuild assets when changes are detected. Supported asset types are: SaSS, css, ts, js, and less. How to define assets \u00b6 The convention used in this repository is to put all css / js files in the Assets folder of your theme or module. Then, you define a Assets.json file that specifies which scripts to compile to the wwwroot folder of the solution. Please see the DigitalTheme for an example on how this works. The Assets folder contains the raw js and sass files and the Assets.json file defines which files should be copied / combined in the output.","title":"Assets"},{"location":"development/assets/#assets-asset-css-js-files","text":"When adding / modifying assets, you should use the gulp script to transpile and copy the assets into the wwwroot folder. To install gulp, run npm install from the root of this solution. Use the npm run watch command to automatically rebuild assets when changes are detected. Supported asset types are: SaSS, css, ts, js, and less.","title":"Assets asset (css, js) files"},{"location":"development/assets/#how-to-define-assets","text":"The convention used in this repository is to put all css / js files in the Assets folder of your theme or module. Then, you define a Assets.json file that specifies which scripts to compile to the wwwroot folder of the solution. Please see the DigitalTheme for an example on how this works. The Assets folder contains the raw js and sass files and the Assets.json file defines which files should be copied / combined in the output.","title":"How to define assets"},{"location":"development/committing/","text":"Git Commit Message Standard \u00b6 Taken from conventional commits Summary \u00b6 The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages. The commit message should be structured as follows: <type>[optional scope]: <description> [optional body] [optional footer(s)] The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in semantic versioning). feat: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in semantic versioning). BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in semantic versioning). A BREAKING CHANGE can be part of commits of any type. types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others. footers other than BREAKING CHANGE: may be provided and follow a convention similar to git trailer format. Additional types are not mandated by the conventional commits specification, and have no implicit effect in semantic versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit\u2019s type, to provide additional contextual information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays. Examples \u00b6 Commit message with description and breaking change footer \u00b6 feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files Commit message with ! to draw attention to breaking change \u00b6 refactor!: drop support for Node 6 Commit message with both ! and BREAKING CHANGE footer \u00b6 refactor!: drop support for Node 6 BREAKING CHANGE: refactor to use JavaScript features not available in Node 6. Commit message with no body \u00b6 docs: correct spelling of CHANGELOG Commit message with scope \u00b6 feat(lang): add polish language Commit message with multi-paragraph body and multiple footers \u00b6 fix: correct minor typos in code see the issue for details on typos fixed. Reviewed-by: Z Refs #133","title":"Committing"},{"location":"development/committing/#git-commit-message-standard","text":"Taken from conventional commits","title":"Git Commit Message Standard"},{"location":"development/committing/#summary","text":"The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages. The commit message should be structured as follows: <type>[optional scope]: <description> [optional body] [optional footer(s)] The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in semantic versioning). feat: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in semantic versioning). BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in semantic versioning). A BREAKING CHANGE can be part of commits of any type. types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others. footers other than BREAKING CHANGE: may be provided and follow a convention similar to git trailer format. Additional types are not mandated by the conventional commits specification, and have no implicit effect in semantic versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit\u2019s type, to provide additional contextual information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays.","title":"Summary"},{"location":"development/committing/#examples","text":"","title":"Examples"},{"location":"development/committing/#commit-message-with-description-and-breaking-change-footer","text":"feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files","title":"Commit message with description and breaking change footer"},{"location":"development/committing/#commit-message-with-to-draw-attention-to-breaking-change","text":"refactor!: drop support for Node 6","title":"Commit message with ! to draw attention to breaking change"},{"location":"development/committing/#commit-message-with-both-and-breaking-change-footer","text":"refactor!: drop support for Node 6 BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.","title":"Commit message with both ! and BREAKING CHANGE footer"},{"location":"development/committing/#commit-message-with-no-body","text":"docs: correct spelling of CHANGELOG","title":"Commit message with no body"},{"location":"development/committing/#commit-message-with-scope","text":"feat(lang): add polish language","title":"Commit message with scope"},{"location":"development/committing/#commit-message-with-multi-paragraph-body-and-multiple-footers","text":"fix: correct minor typos in code see the issue for details on typos fixed. Reviewed-by: Z Refs #133","title":"Commit message with multi-paragraph body and multiple footers"},{"location":"development/getting-started/","text":"Getting Started \u00b6 Hello fellow developer, Get started here ! Developer environment \u00b6 Dependencies \u00b6 Dotnet 5.0 NodeJS 15+ VSCode or Visual Studio 2019 Recommended VSCode extensions \u00b6 Omnisharp (C#) Liquid Language Support Bracket pair colorizer vscode-icons GitLens EditorConfig vscode-solution-explorer Recommended powershell setup \u00b6 This step is recommended for VSCode users. This creates aliases Run these commands to setup your powershell profile script: # From a powershell terminal # This displays the path of your profile $profile # Test to see if it exists test-path $profile # Create it if it does not exist new-item -path $profile -itemtype file -force # Edit it in VSCode code $profile Copy and modify this in your powershell profile $innoGitRepo = \"<path-to>\\StatCan.OrchardCore\" # Navigate to directory function in { set-location $innoGitRepo } # Run the clean script from the test folder. Warning: this deletes your App_Data function iac { set-location \" $( $innoGitRepo ) \\test\" npm run clean } # Open cypress function it { set-location \" $( $innoGitRepo ) \\test\" npm run cypress } # Run css watcher function iw { set-location \" $( $innoGitRepo ) \" npm run watch } # Build function ib { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet build } # Clean function ic { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet clean } # Run function ir { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet run } # Run (Production) function ip { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet .\\ bin \\ Debug \\ netcoreapp3 . 0 \\ StatCan . OrchardCore . Cms . Web . dll } # Build & Run (Production) function ibp { ib dotnet .\\ bin \\ Debug \\ net5 . 0 \\ StatCan . OrchardCore . Cms . Web . dll } Don't forget to restart your powershell session to load the changes. Quickstart \u00b6 Run these commands in powershell: From anywhere ir if you have the above powershell setup or From the root of the project dotnet run --project src/StatCan.OrchardCore.Cms.Web/StatCan.OrchardCore.Cms.Web.csproj if you don't Visit https://localhost:5001 to load your Orchard Website When presented with the orchard setup screen, Select the the recipe you want to try. I suggest using the Software as a Service recipe and then use Orchard's Tenant feature to test different sites / recipes Use sqlite as a database to keep things simple Visit https://localhost:5001/admin to use the admin interface of Orchard. Starting fresh \u00b6 To cleanup the environment and start fresh, you need to delete the src/StatCan.OrchardCore.Cms.Web/App_Data folder. This deletes all configuration and databases (if you are using SQLite). You can also delete tenants individually by deleting the data in src/StatCan.OrchardCore.Cms.Web/App_Data/Sites/{TenantName} and removing the entry in src/StatCan.OrchardCore.Cms.Web/App_Data/tenants.json Testing \u00b6 The framework used to test the innovation website is Cypress. Note: The tests assume a clean environment and may fail if you run them on an existing instance. To run tests: From the test folder of the project, run npm install . From the same folder, you can run npm run cypress to open cypress and start running tests Debugging \u00b6 We include launch.json / tasks.json files to help debug your code. To launch the site with debugging, open the Debug (ctrl+shift+D) vscode window. Select the .NET Core Launch(web) if the project is not running, or .NET Core Attach to attach the debugger to attach to a running project.","title":"Getting Started"},{"location":"development/getting-started/#getting-started","text":"Hello fellow developer, Get started here !","title":"Getting Started"},{"location":"development/getting-started/#developer-environment","text":"","title":"Developer environment"},{"location":"development/getting-started/#dependencies","text":"Dotnet 5.0 NodeJS 15+ VSCode or Visual Studio 2019","title":"Dependencies"},{"location":"development/getting-started/#recommended-vscode-extensions","text":"Omnisharp (C#) Liquid Language Support Bracket pair colorizer vscode-icons GitLens EditorConfig vscode-solution-explorer","title":"Recommended VSCode extensions"},{"location":"development/getting-started/#recommended-powershell-setup","text":"This step is recommended for VSCode users. This creates aliases Run these commands to setup your powershell profile script: # From a powershell terminal # This displays the path of your profile $profile # Test to see if it exists test-path $profile # Create it if it does not exist new-item -path $profile -itemtype file -force # Edit it in VSCode code $profile Copy and modify this in your powershell profile $innoGitRepo = \"<path-to>\\StatCan.OrchardCore\" # Navigate to directory function in { set-location $innoGitRepo } # Run the clean script from the test folder. Warning: this deletes your App_Data function iac { set-location \" $( $innoGitRepo ) \\test\" npm run clean } # Open cypress function it { set-location \" $( $innoGitRepo ) \\test\" npm run cypress } # Run css watcher function iw { set-location \" $( $innoGitRepo ) \" npm run watch } # Build function ib { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet build } # Clean function ic { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet clean } # Run function ir { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet run } # Run (Production) function ip { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet .\\ bin \\ Debug \\ netcoreapp3 . 0 \\ StatCan . OrchardCore . Cms . Web . dll } # Build & Run (Production) function ibp { ib dotnet .\\ bin \\ Debug \\ net5 . 0 \\ StatCan . OrchardCore . Cms . Web . dll } Don't forget to restart your powershell session to load the changes.","title":"Recommended powershell setup"},{"location":"development/getting-started/#quickstart","text":"Run these commands in powershell: From anywhere ir if you have the above powershell setup or From the root of the project dotnet run --project src/StatCan.OrchardCore.Cms.Web/StatCan.OrchardCore.Cms.Web.csproj if you don't Visit https://localhost:5001 to load your Orchard Website When presented with the orchard setup screen, Select the the recipe you want to try. I suggest using the Software as a Service recipe and then use Orchard's Tenant feature to test different sites / recipes Use sqlite as a database to keep things simple Visit https://localhost:5001/admin to use the admin interface of Orchard.","title":"Quickstart"},{"location":"development/getting-started/#starting-fresh","text":"To cleanup the environment and start fresh, you need to delete the src/StatCan.OrchardCore.Cms.Web/App_Data folder. This deletes all configuration and databases (if you are using SQLite). You can also delete tenants individually by deleting the data in src/StatCan.OrchardCore.Cms.Web/App_Data/Sites/{TenantName} and removing the entry in src/StatCan.OrchardCore.Cms.Web/App_Data/tenants.json","title":"Starting fresh"},{"location":"development/getting-started/#testing","text":"The framework used to test the innovation website is Cypress. Note: The tests assume a clean environment and may fail if you run them on an existing instance. To run tests: From the test folder of the project, run npm install . From the same folder, you can run npm run cypress to open cypress and start running tests","title":"Testing"},{"location":"development/getting-started/#debugging","text":"We include launch.json / tasks.json files to help debug your code. To launch the site with debugging, open the Debug (ctrl+shift+D) vscode window. Select the .NET Core Launch(web) if the project is not running, or .NET Core Attach to attach the debugger to attach to a running project.","title":"Debugging"},{"location":"development/localization/","text":"Localization \u00b6 Orchard uses PO files to support translation / pluralization of static strings. See the orchard documentation Automatic translations \u00b6 We have a GitHub action script that automates the translation process for us. This action is triggerred manually by running the workflow from here . This script does the following: 1. Extracts the translation in po files from the code with the PoExtractor.OrchardCore dotnet tool. 2. Runs our translation_script that uses the free Google Translate api to get a best guess estimate of the translations. 3. Creates a pull request with the new translations strings.","title":"Localization"},{"location":"development/localization/#localization","text":"Orchard uses PO files to support translation / pluralization of static strings. See the orchard documentation","title":"Localization"},{"location":"development/localization/#automatic-translations","text":"We have a GitHub action script that automates the translation process for us. This action is triggerred manually by running the workflow from here . This script does the following: 1. Extracts the translation in po files from the code with the PoExtractor.OrchardCore dotnet tool. 2. Runs our translation_script that uses the free Google Translate api to get a best guess estimate of the translations. 3. Creates a pull request with the new translations strings.","title":"Automatic translations"},{"location":"development/solution-templates/","text":"Solution Templates \u00b6 Save time by using one of our templated solutions! We're leveraging dotnet new ( see Microsoft developer docs ) here. The Solution Template \u00b6 This template sets up a new solution that allows you to create your own Themes and Modules. Uses the StatCan.OrchardCore package as hosted on Cloudsmith Downloading \u00b6 To create a new site using this boilerplate you'll first need to install the template, which is hosted on CloudSmith. dotnet new -i StatCan.OrchardCore.ProjectTemplates::1.0.0-rc3-* --nuget-source https://nuget.cloudsmith.io/statcan-digitalinnovation/statcan-orchardcore/v3/index.json Run \u00b6 Once the installation is complete run this command to create your project boilerplate dotnet new stc-oc-siteboilerplate -n Project.StatCan.OrchardCore -o Project.StatCan.OrchardCore -p \"Name\" -pd \"Desciption\" Parameters \u00b6 -n | --name : Namespace and name of the .Net project e.g. Project.OrchardCore -o | --output : Location to place the generated output. -p | --pname : Project name displayed in the read me. -pd | --pdescription : Project description displayed in the read me. -ov | --orchard-version : OrchardCore version to use. -sov | --statcan-orchard-version : StatCan orchard version to use. Additional templates \u00b6 Additional templates are provided by OrchardCore. See the documentation here .","title":"Solution Templates"},{"location":"development/solution-templates/#solution-templates","text":"Save time by using one of our templated solutions! We're leveraging dotnet new ( see Microsoft developer docs ) here.","title":"Solution Templates"},{"location":"development/solution-templates/#the-solution-template","text":"This template sets up a new solution that allows you to create your own Themes and Modules. Uses the StatCan.OrchardCore package as hosted on Cloudsmith","title":"The Solution Template"},{"location":"development/solution-templates/#downloading","text":"To create a new site using this boilerplate you'll first need to install the template, which is hosted on CloudSmith. dotnet new -i StatCan.OrchardCore.ProjectTemplates::1.0.0-rc3-* --nuget-source https://nuget.cloudsmith.io/statcan-digitalinnovation/statcan-orchardcore/v3/index.json","title":"Downloading"},{"location":"development/solution-templates/#run","text":"Once the installation is complete run this command to create your project boilerplate dotnet new stc-oc-siteboilerplate -n Project.StatCan.OrchardCore -o Project.StatCan.OrchardCore -p \"Name\" -pd \"Desciption\"","title":"Run"},{"location":"development/solution-templates/#parameters","text":"-n | --name : Namespace and name of the .Net project e.g. Project.OrchardCore -o | --output : Location to place the generated output. -p | --pname : Project name displayed in the read me. -pd | --pdescription : Project description displayed in the read me. -ov | --orchard-version : OrchardCore version to use. -sov | --statcan-orchard-version : StatCan orchard version to use.","title":"Parameters"},{"location":"development/solution-templates/#additional-templates","text":"Additional templates are provided by OrchardCore. See the documentation here .","title":"Additional templates"},{"location":"development/testing/","text":"Testing \u00b6 We use the Cypress JS testing framework to run E2E tests for this application. Useful commands \u00b6 From the /test folder in this solution, you can run the following commands to simplify testing the application. npm run host hosts a version of OC running in production mode (faster). npm run build builds the application. npm run test hosts the site then runs cypress tests. npm run cypress opens cypress dashboard. npm run cypress:run runs the cypress tests in the console. Assumes a pre-running site instance.","title":"Testing"},{"location":"development/testing/#testing","text":"We use the Cypress JS testing framework to run E2E tests for this application.","title":"Testing"},{"location":"development/testing/#useful-commands","text":"From the /test folder in this solution, you can run the following commands to simplify testing the application. npm run host hosts a version of OC running in production mode (faster). npm run build builds the application. npm run test hosts the site then runs cypress tests. npm run cypress opens cypress dashboard. npm run cypress:run runs the cypress tests in the console. Assumes a pre-running site instance.","title":"Useful commands"},{"location":"reference/Liquid/","text":"Liquid \u00b6 js_encode filter \u00b6 The js_encode filter encodes a string for javascript. Input my_value = Hello world \" ' \" {{ my_value | js_encode }} Output Hello world /\" /' /\" httpcontext_set_item filter \u00b6 The httpcontext_set_item filter is used to set a value in the HttpContext.Items Usage {{ \"Key\" | httpcontext_set_item : \"Value\" }} LocalizedText ( StatCan.OrchardCore.LocalizedText ) \u00b6 Use the localize liquid filter to reference and output a value that matches the current culture and name provided. Examples \u00b6 Data: [ { \"Name\" : \"my_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some French Value\" } ] } ] Input {{ \"my_value\" | localize }} {{ Model . ContentItem | localize : \"my_value\" }} Output Some English Value Some English Value You can also pass parameters to your values \u00b6 Data: [ { \"Name\" : \"my_parameterized_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some {0} English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some {0} French Value\" } ] } ] Input {{ \"my_parameterized_value\" | localize : \"parameterized\" }} {{ Model . ContentItem | localize : \"my_parameterized_value\" , \"parameterized\" }} Output Some parameterized English Value Some parameterized English Value if you want to render html, you need to | raw \u00b6 Data: [ { \"Name\" : \"my_html_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"<span>Some English Value</span>\" }, { \"Culture\" : \"fr\" , \"Value\" : \"<span>Some French Value</span>\" } ] } ] Input {{ \"my_html_value\" | localize }} {{ Model . ContentItem | localize : \"my_html_value\" | raw }} Output &lt;span&gt;bold value&lt;/span&gt; <span>Some English Value</span> GitHub ( StatCan.OrchardCore.GitHub ) \u00b6 Here are some liquid filters provided by the GitHub module. tokenName refers to the name of the token you added to the github settings. github_pr filter \u00b6 Returns the PullRequest object for the specified pull request number. {{ 123 | github_pullrequest : \"owner\" , \"repo\" , \"tokenName\" }} github_pr_reviewcomments filter \u00b6 Returns a list of PullRequestReviewComment object for the specified pull request number. This returns the comments related to PR reviews. Use the github_comments filter to get pr discussions. {{ 123 | github_pullrequest_comments : \"owner\" , \"repo\" , \"tokenName\" }} github_issue filter \u00b6 Returns the Issue object for the specified issue number. {{ 123 | github_issue : \"owner\" , \"repo\" , \"tokenName\" }} github_comments filter \u00b6 Returns a list of IssueComment for the specified issue / pull request number. {{ 123 | github_comments : \"owner\" , \"repo\" , \"tokenName\" }} User filters \u00b6 users_by_role filter \u00b6 Returns a list of Users that have the role(s) passed as a parameter of the filter {% assign users = \"Editor,Administrator\" | split : ',' | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %} -- {% assign users = \"Editor\" | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %} Shortcodes filters \u00b6 to_html_attributes filter \u00b6 Convert shortcode arguments to html attributes. The first argument of the filter is a comma delimited whitelist of arguments to convert. If no whitelist is provided, all arguments will be output. <!-- This is the liquid in the Shortcode template --> <v-container {{ Args | to_html_attributes : \"id,fluid,tag\" | raw }} >{{ Content | raw }} </v-container> -- <!-- This is the shortcode in your html template --> [container id='my-id' other='other']Some html content[/container] -- <!-- This is the output --> <v-container id=\"my-id\">Some html content</v-container>","title":"Liquid"},{"location":"reference/Liquid/#liquid","text":"","title":"Liquid"},{"location":"reference/Liquid/#js_encode-filter","text":"The js_encode filter encodes a string for javascript. Input my_value = Hello world \" ' \" {{ my_value | js_encode }} Output Hello world /\" /' /\"","title":"js_encode filter"},{"location":"reference/Liquid/#httpcontext_set_item-filter","text":"The httpcontext_set_item filter is used to set a value in the HttpContext.Items Usage {{ \"Key\" | httpcontext_set_item : \"Value\" }}","title":"httpcontext_set_item filter"},{"location":"reference/Liquid/#localizedtext-statcanorchardcorelocalizedtext","text":"Use the localize liquid filter to reference and output a value that matches the current culture and name provided.","title":"LocalizedText (StatCan.OrchardCore.LocalizedText)"},{"location":"reference/Liquid/#examples","text":"Data: [ { \"Name\" : \"my_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some French Value\" } ] } ] Input {{ \"my_value\" | localize }} {{ Model . ContentItem | localize : \"my_value\" }} Output Some English Value Some English Value","title":"Examples"},{"location":"reference/Liquid/#you-can-also-pass-parameters-to-your-values","text":"Data: [ { \"Name\" : \"my_parameterized_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some {0} English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some {0} French Value\" } ] } ] Input {{ \"my_parameterized_value\" | localize : \"parameterized\" }} {{ Model . ContentItem | localize : \"my_parameterized_value\" , \"parameterized\" }} Output Some parameterized English Value Some parameterized English Value","title":"You can also pass parameters to your values"},{"location":"reference/Liquid/#if-you-want-to-render-html-you-need-to-raw","text":"Data: [ { \"Name\" : \"my_html_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"<span>Some English Value</span>\" }, { \"Culture\" : \"fr\" , \"Value\" : \"<span>Some French Value</span>\" } ] } ] Input {{ \"my_html_value\" | localize }} {{ Model . ContentItem | localize : \"my_html_value\" | raw }} Output &lt;span&gt;bold value&lt;/span&gt; <span>Some English Value</span>","title":"if you want to render html, you need to | raw"},{"location":"reference/Liquid/#github-statcanorchardcoregithub","text":"Here are some liquid filters provided by the GitHub module. tokenName refers to the name of the token you added to the github settings.","title":"GitHub (StatCan.OrchardCore.GitHub)"},{"location":"reference/Liquid/#github_pr-filter","text":"Returns the PullRequest object for the specified pull request number. {{ 123 | github_pullrequest : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_pr filter"},{"location":"reference/Liquid/#github_pr_reviewcomments-filter","text":"Returns a list of PullRequestReviewComment object for the specified pull request number. This returns the comments related to PR reviews. Use the github_comments filter to get pr discussions. {{ 123 | github_pullrequest_comments : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_pr_reviewcomments filter"},{"location":"reference/Liquid/#github_issue-filter","text":"Returns the Issue object for the specified issue number. {{ 123 | github_issue : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_issue filter"},{"location":"reference/Liquid/#github_comments-filter","text":"Returns a list of IssueComment for the specified issue / pull request number. {{ 123 | github_comments : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_comments filter"},{"location":"reference/Liquid/#user-filters","text":"","title":"User filters"},{"location":"reference/Liquid/#users_by_role-filter","text":"Returns a list of Users that have the role(s) passed as a parameter of the filter {% assign users = \"Editor,Administrator\" | split : ',' | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %} -- {% assign users = \"Editor\" | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %}","title":"users_by_role filter"},{"location":"reference/Liquid/#shortcodes-filters","text":"","title":"Shortcodes filters"},{"location":"reference/Liquid/#to_html_attributes-filter","text":"Convert shortcode arguments to html attributes. The first argument of the filter is a comma delimited whitelist of arguments to convert. If no whitelist is provided, all arguments will be output. <!-- This is the liquid in the Shortcode template --> <v-container {{ Args | to_html_attributes : \"id,fluid,tag\" | raw }} >{{ Content | raw }} </v-container> -- <!-- This is the shortcode in your html template --> [container id='my-id' other='other']Some html content[/container] -- <!-- This is the output --> <v-container id=\"my-id\">Some html content</v-container>","title":"to_html_attributes filter"},{"location":"reference/Logging/","text":"Logging \u00b6 Our main project uses Serilog structured logging. The default logging configuration can be found in the appsettings.json file at the root of the web project. It is recommended to override these values using Environment Variables when in a production environment. $env:Serilog__MinimumLevel = \"Information\"","title":"Logging"},{"location":"reference/Logging/#logging","text":"Our main project uses Serilog structured logging. The default logging configuration can be found in the appsettings.json file at the root of the web project. It is recommended to override these values using Environment Variables when in a production environment. $env:Serilog__MinimumLevel = \"Information\"","title":"Logging"},{"location":"reference/Scripting/","text":"Scripting \u00b6 The following methods are available in addition to the OrchardCore scripting methods . Note : The feature (module) where the scripts are defined needs to be enabled for the methods to be available in your scripts. For example, to get the httpContext() function, you must enable the OrchardCore.Workflows.Http feature in the admin panel. Scripting module ( StatCan.OrchardCore.Scripting ) \u00b6 Http \u00b6 Function Description httpRedirect(url: String): void Calls the HttpContext.Response.Redirect() method. The ~/ will be replaced by the tenant base path. Forms \u00b6 Function Description requestFormAsJsonObject(): JObject Returns a sanitized JObject representation of the HttpContext.Request.Form object. Sanitization is performed by Orchard's sanitizer . addError(name: String, errorMessage: String): void Adds an error to the mvc ModelState dictionary with the specified name. Use the serverValidationMessage name to add a global error message to your VueForm. hasErrors(): Boolean Returns true if the error dictionary contains any errors. validateReCaptcha(recaptchaResponse): Boolean Returns true if the recaptchaResponse is valid, false if invalid. notify(type: String, message: String): Boolean Adds a message to the Orchard INotifier. Returns true if the the notification got added properly to the notifier. Type can be success , information , warning or error Contents \u00b6 These methods are added when the OrchardCore.Contents module is enabled Function Description contentByItemId(contentItemId: String): ContentItem Returns the ContentItem with the specified contentItemId contentByItemIdVersion(contentItemId: String, version: String): ContentItem Returns the ContentItem with the specified contentItemId and specific version. Version can be one of these: Published , Latest , Draft , DraftRequired . If version is blank, the Published version is returned contentByVersionId(versionId: String): ContentItem Returns the ContentItem with the specified versionId ownContentByType(type: String): ContentItem Returns all ContentItems of type where the owner is the current user Deployment \u00b6 These methods are added when the OrchardCore.Deployment module is enabled Function Description importRecipeJson(json: String): RecipeJsonResult Returns true if the recipe executed successfully or false if something went wrong. Return values Success = 0, InvalidJson = 1, Exception = 2 Users \u00b6 These methods are added when the OrchardCore.Users module is enabled Function Description validateEmail(email: String): Boolean Validates an email address updateEmail(email: String): UpdateEmailStatus Validates an email address. Return values: Success = 0, Unauthorized = 1, InvalidEmail = 2, AlreadyExists = 3, UpdateError = 4 updateCustomUserSettings(contentType: String, properties: Object): UpdateSettingsStatus Updates the CustomUserSettings with the specified contentType with the passed properties. Return values: Success = 0, Unauthorized = 1, TypeError = 2 setUserRole(userName: String, roleName: String): Boolean Sets a role to a user. Security critical function. isAuthenticated(): Boolean Returns true if the user is Authenticated. isInRole(userName: String, roleName: String): Boolean Returns true if the user with specified userName has the specified role. Localization \u00b6 These methods are added when the OrchardCore.ContentLocalization module is enabled Function Description contentByLocalizationSet(localizationSet: String, culture: String): ContentItem Returns the ContentItem with the attached localizationSet for the specified culture Taxonomy \u00b6 These methods are added when the OrchardCore.Taxonomies module is enabled Function Description taxonomyTerms(taxonomyContentItemId: String, termContentItemIds: String[]): ContentItem[] Returns the Taxonomy Term ContentItems that are listed in the termContentItemIds for the taxonomy with id taxonomyContentItemId . taxonomyTermsJson(termObject: JObject): ContentItem[] Returns all the taxonomy terms that are listed on the termObject. The termObject is the object output by the TaxonomyPicker field and should contain a TaxonomyContentItemId string and a TermContentItemIds array. ## LocalizedText module ( StatCan.OrchardCore.LocalizedText ) You can get the values stored in the LocalizedTextPart inside a script. Function Description getLocalizedTextValues(contentItem: ContentItem): JObject Returns a JObject representation of the LocalizedTextPart for the current thread culture VueForms module ( StatCan.OrchardCore.VueForms ) \u00b6 Function Description getFormContentItem(): ContentItem Only available in the VueForm server side scripts. Returns the current VueForm ContentItem instance. debug(name: String, value: Object) Outputs the object in the debug response when the VueForm is in debug mode getSurveyData(): JObject Returns the output of the Survey data as a JObject Media \u00b6 These methods are added when the OrchardCore.Media module is enabled The SaveMediaResult object has the following shape. { name : String , size : long , folder : String , mediaPath : String , hasError : Boolean , errorMessage : String } Function Description saveMedia(folder: String, renameIfExists: Boolean): SaveMediaResult[] Saves all files present on the HttpRequest to a specific folder. The renameIfExists parameter controls if we append a number to the file name if it already exists. hasMediaError(mediaResults: SaveMediaResult[]): Boolean Returns true if one of the items in the SaveMediaResult array has an errors getMediaErrors(mediaResults: SaveMediaResult[]): String[] Gets the list of media paths as an array of strings setMediaError(name: String, mediaResults: SaveMediaResult[]) Sets the ModelError with the specified name to the concatenation of all media errors in the SaveMediaResult array. A newline is inserted between each error getMediaPaths( mediaResults: SaveMediaResult[]): String[] Gets the list of media paths as an array of strings The saveMedia method usage \u00b6 The saveMedia method returns an array of SaveMediaResult objects. Each object in the array represents a file that was uploaded. If an error occurs when trying to save a file, the hasError boolean property will be set to true and the errorMessage property will be populated with the error message. If no errors occurs, the mediaPath property will be set to the path of the image as saved in the media library. For example, you can iterate through all the SaveMediaResult objects like this: const result = saveMedia ( 'test' , true ); for ( const file of result ) { log ( 'Information' , ` ${ file . mediaPath } ` ); }","title":"Scripting"},{"location":"reference/Scripting/#scripting","text":"The following methods are available in addition to the OrchardCore scripting methods . Note : The feature (module) where the scripts are defined needs to be enabled for the methods to be available in your scripts. For example, to get the httpContext() function, you must enable the OrchardCore.Workflows.Http feature in the admin panel.","title":"Scripting"},{"location":"reference/Scripting/#scripting-module-statcanorchardcorescripting","text":"","title":"Scripting module (StatCan.OrchardCore.Scripting)"},{"location":"reference/Scripting/#http","text":"Function Description httpRedirect(url: String): void Calls the HttpContext.Response.Redirect() method. The ~/ will be replaced by the tenant base path.","title":"Http"},{"location":"reference/Scripting/#forms","text":"Function Description requestFormAsJsonObject(): JObject Returns a sanitized JObject representation of the HttpContext.Request.Form object. Sanitization is performed by Orchard's sanitizer . addError(name: String, errorMessage: String): void Adds an error to the mvc ModelState dictionary with the specified name. Use the serverValidationMessage name to add a global error message to your VueForm. hasErrors(): Boolean Returns true if the error dictionary contains any errors. validateReCaptcha(recaptchaResponse): Boolean Returns true if the recaptchaResponse is valid, false if invalid. notify(type: String, message: String): Boolean Adds a message to the Orchard INotifier. Returns true if the the notification got added properly to the notifier. Type can be success , information , warning or error","title":"Forms"},{"location":"reference/Scripting/#contents","text":"These methods are added when the OrchardCore.Contents module is enabled Function Description contentByItemId(contentItemId: String): ContentItem Returns the ContentItem with the specified contentItemId contentByItemIdVersion(contentItemId: String, version: String): ContentItem Returns the ContentItem with the specified contentItemId and specific version. Version can be one of these: Published , Latest , Draft , DraftRequired . If version is blank, the Published version is returned contentByVersionId(versionId: String): ContentItem Returns the ContentItem with the specified versionId ownContentByType(type: String): ContentItem Returns all ContentItems of type where the owner is the current user","title":"Contents"},{"location":"reference/Scripting/#deployment","text":"These methods are added when the OrchardCore.Deployment module is enabled Function Description importRecipeJson(json: String): RecipeJsonResult Returns true if the recipe executed successfully or false if something went wrong. Return values Success = 0, InvalidJson = 1, Exception = 2","title":"Deployment"},{"location":"reference/Scripting/#users","text":"These methods are added when the OrchardCore.Users module is enabled Function Description validateEmail(email: String): Boolean Validates an email address updateEmail(email: String): UpdateEmailStatus Validates an email address. Return values: Success = 0, Unauthorized = 1, InvalidEmail = 2, AlreadyExists = 3, UpdateError = 4 updateCustomUserSettings(contentType: String, properties: Object): UpdateSettingsStatus Updates the CustomUserSettings with the specified contentType with the passed properties. Return values: Success = 0, Unauthorized = 1, TypeError = 2 setUserRole(userName: String, roleName: String): Boolean Sets a role to a user. Security critical function. isAuthenticated(): Boolean Returns true if the user is Authenticated. isInRole(userName: String, roleName: String): Boolean Returns true if the user with specified userName has the specified role.","title":"Users"},{"location":"reference/Scripting/#localization","text":"These methods are added when the OrchardCore.ContentLocalization module is enabled Function Description contentByLocalizationSet(localizationSet: String, culture: String): ContentItem Returns the ContentItem with the attached localizationSet for the specified culture","title":"Localization"},{"location":"reference/Scripting/#taxonomy","text":"These methods are added when the OrchardCore.Taxonomies module is enabled Function Description taxonomyTerms(taxonomyContentItemId: String, termContentItemIds: String[]): ContentItem[] Returns the Taxonomy Term ContentItems that are listed in the termContentItemIds for the taxonomy with id taxonomyContentItemId . taxonomyTermsJson(termObject: JObject): ContentItem[] Returns all the taxonomy terms that are listed on the termObject. The termObject is the object output by the TaxonomyPicker field and should contain a TaxonomyContentItemId string and a TermContentItemIds array. ## LocalizedText module ( StatCan.OrchardCore.LocalizedText ) You can get the values stored in the LocalizedTextPart inside a script. Function Description getLocalizedTextValues(contentItem: ContentItem): JObject Returns a JObject representation of the LocalizedTextPart for the current thread culture","title":"Taxonomy"},{"location":"reference/Scripting/#vueforms-module-statcanorchardcorevueforms","text":"Function Description getFormContentItem(): ContentItem Only available in the VueForm server side scripts. Returns the current VueForm ContentItem instance. debug(name: String, value: Object) Outputs the object in the debug response when the VueForm is in debug mode getSurveyData(): JObject Returns the output of the Survey data as a JObject","title":"VueForms module (StatCan.OrchardCore.VueForms)"},{"location":"reference/Scripting/#media","text":"These methods are added when the OrchardCore.Media module is enabled The SaveMediaResult object has the following shape. { name : String , size : long , folder : String , mediaPath : String , hasError : Boolean , errorMessage : String } Function Description saveMedia(folder: String, renameIfExists: Boolean): SaveMediaResult[] Saves all files present on the HttpRequest to a specific folder. The renameIfExists parameter controls if we append a number to the file name if it already exists. hasMediaError(mediaResults: SaveMediaResult[]): Boolean Returns true if one of the items in the SaveMediaResult array has an errors getMediaErrors(mediaResults: SaveMediaResult[]): String[] Gets the list of media paths as an array of strings setMediaError(name: String, mediaResults: SaveMediaResult[]) Sets the ModelError with the specified name to the concatenation of all media errors in the SaveMediaResult array. A newline is inserted between each error getMediaPaths( mediaResults: SaveMediaResult[]): String[] Gets the list of media paths as an array of strings","title":"Media"},{"location":"reference/Scripting/#the-savemedia-method-usage","text":"The saveMedia method returns an array of SaveMediaResult objects. Each object in the array represents a file that was uploaded. If an error occurs when trying to save a file, the hasError boolean property will be set to true and the errorMessage property will be populated with the error message. If no errors occurs, the mediaPath property will be set to the path of the image as saved in the media library. For example, you can iterate through all the SaveMediaResult objects like this: const result = saveMedia ( 'test' , true ); for ( const file of result ) { log ( 'Information' , ` ${ file . mediaPath } ` ); }","title":"The saveMedia method usage"},{"location":"reference/Workflows/","text":"Workflows \u00b6 This document contains documentation for all workflow tasks and activities available in this repository. GitHub ( StatCan.OrchardCore.GitHub ) \u00b6 The following activities are available with the GitHub module Activity Type Description Commit File Task Create or updates a file on a specific branch Create Branch Task Creates a branch from a git reference Create Pull Request Task Creates a pull request VueForms ( StatCan.OrchardCore.VueForms ) \u00b6 Activity Type Description VueForm Submitted Event Triggerred when a VueForm is valid. Runs for all selected VueForms in the Event options. The VueForm Submitted event includes the VueForm content item as an input and the correlationId of the form. You can access the Form data by using the requestFormAsJsonObject() scripting method. EmailTemplates ( StatCan.OrchardCore.EmailTemplates ) \u00b6 Activity Type Description Send Email With Template Task Sends an email with the selected template.","title":"Workflows"},{"location":"reference/Workflows/#workflows","text":"This document contains documentation for all workflow tasks and activities available in this repository.","title":"Workflows"},{"location":"reference/Workflows/#github-statcanorchardcoregithub","text":"The following activities are available with the GitHub module Activity Type Description Commit File Task Create or updates a file on a specific branch Create Branch Task Creates a branch from a git reference Create Pull Request Task Creates a pull request","title":"GitHub (StatCan.OrchardCore.GitHub)"},{"location":"reference/Workflows/#vueforms-statcanorchardcorevueforms","text":"Activity Type Description VueForm Submitted Event Triggerred when a VueForm is valid. Runs for all selected VueForms in the Event options. The VueForm Submitted event includes the VueForm content item as an input and the correlationId of the form. You can access the Form data by using the requestFormAsJsonObject() scripting method.","title":"VueForms (StatCan.OrchardCore.VueForms)"},{"location":"reference/Workflows/#emailtemplates-statcanorchardcoreemailtemplates","text":"Activity Type Description Send Email With Template Task Sends an email with the selected template.","title":"EmailTemplates (StatCan.OrchardCore.EmailTemplates)"},{"location":"reference/applications/","text":"Applications \u00b6 Application modules provide \"out of the box\" solutions. Hackathon ( StatCan.OrchardCore.Hackathon ) \u00b6 Scheduling ( StatCan.OrchardCore.Scheduling ) \u00b6","title":"Applications"},{"location":"reference/applications/#applications","text":"Application modules provide \"out of the box\" solutions.","title":"Applications"},{"location":"reference/applications/#hackathon-statcanorchardcorehackathon","text":"","title":"Hackathon (StatCan.OrchardCore.Hackathon)"},{"location":"reference/applications/#scheduling-statcanorchardcorescheduling","text":"","title":"Scheduling (StatCan.OrchardCore.Scheduling)"},{"location":"reference/modules/Configuration/","text":"Deployment configuration \u00b6 The StatCan.OrchardCore.Configuration library adds support for configuring persistent modules, smtp settings, reverse proxy setting and https settings with orchard's configuration . Example appsettings.json \u00b6 { \"OrchardCore\" : { \"Features\" : [ \"StatCan.OrchardCore.Configuration\" , \"OrchardCore.Email\" , \"OrchardCore.ReverseProxy\" , \"OrchardCore.Https\" ], \"StatCan_Configuration\" : { \"OverwriteSmtpSettings\" : true , \"OverwriteReverseProxySettings\" : true , \"OverwriteHttpsSettings\" : true }, \"StatCan_Smtp\" : { \"DefaultSender\" : \"no-reply@statcan.ca\" , \"DeliveryMethod\" : 0 , \"Host\" : \"smtp.statcan.ca\" , \"PickupDirectoryLocation\" : null , \"AutoSelectEncryption\" : false , \"EncryptionMethod\" : 2 , \"Port\" : 25 , \"RequireCredentials\" : true , \"UseDefaultCredentials\" : false , \"UserName\" : \"test\" , \"Password\" : \"mysmtppassword\" }, \"StatCan_Https\" : { \"RequireHttps\" : true , \"EnableStrictTransportSecurity\" : false , \"RequireHttpsPermanent\" : false , \"SslPort\" : null }, \"StatCan_ReverseProxy\" : { \"EnableXForwardedFor\" : true , \"EnableXForwardedHost\" : true , \"EnableXForwardedProto\" : true }, } } Sections \u00b6 StatCan_Configuration \u00b6 The variables in this section define if the related settings will be overwritten when the tenant activates. For example, if someone modifies the smtp settings from the Admin interface and the OverwriteSmtpSettings is set to true, the settings will be reset to those specified via configuration the next time the tenant activates. StatCan_Smtp \u00b6 This section will update Orchard's email module configuration . StatCan_Https \u00b6 This section will update Orchard's https module configuration . StatCan_ReverseProxy \u00b6 This section will update Orchard's reverse proxy module configuration . Environment variables \u00b6 It is recommended to use environment variables to configure these settings in a production environment. # Configuration OrchardCore__StatCan_Configuration__OverwriteSmtpSettings: bool OrchardCore__StatCan_Configuration__OverwriteReverseProxySettings: bool OrchardCore__StatCan_Configuration__OverwriteHttpsSettings: bool # Smtp OrchardCore__StatCan_Smtp__DefaultSender: string OrchardCore__StatCan_Smtp__DeliveryMethod: 0 = Network ; 1 = SpecifiedPickupDirectory OrchardCore__StatCan_Smtp__Host: string OrchardCore__StatCan_Smtp__PickupDirectoryLocation: string OrchardCore__StatCan_Smtp__AutoSelectEncryption: bool OrchardCore__StatCan_Smtp__EncryptionMethod: 0 = none ; 1 = SSLTLS ; 2 = STARTTLS OrchardCore__StatCan_Smtp__Port: int OrchardCore__StatCan_Smtp__RequireCredentials: bool OrchardCore__StatCan_Smtp__UseDefaultCredentials: bool OrchardCore__StatCan_Smtp__UserName: string OrchardCore__StatCan_Smtp__Password: string ( unencrypted ) # Https OrchardCore__StatCan_Https__RequireHttps: bool OrchardCore__StatCan_Https__EnableStrictTransportSecurity: bool OrchardCore__StatCan_Https__RequireHttpsPermanent: bool OrchardCore__StatCan_Https__SslPort: int # ReverseProxy OrchardCore__StatCan_ReverseProxy__EnableXForwardedFor: bool OrchardCore__StatCan_ReverseProxy__EnableXForwardedHost: bool OrchardCore__StatCan_ReverseProxy__EnableXForwardedProto: bool # Features OrchardCore__Features__0: string OrchardCore__Features__1: string Here is an example on how to set these environment variables with powershell $env:OrchardCore__Features__0 = \"StatCan.OrchardCore.Configuration\" $env:OrchardCore__Features__1 = \"OrchardCore.ReverseProxy\" $env:OrchardCore__Features__2 = \"OrchardCore.Https\" $env:OrchardCore__StatCan_Configuration__OverwriteReverseProxySettings = \"true\" $env:OrchardCore__StatCan_ReverseProxy__EnableXForwardedFor = \"true\" $env:OrchardCore__StatCan_ReverseProxy__EnableXForwardedHost = \"true\" $env:OrchardCore__StatCan_ReverseProxy__EnableXForwardedProto = \"true\" $env:OrchardCore__StatCan_Configuration__OverwriteHttpsSettings = \"true\" $env:OrchardCore__StatCan_Https__RequireHttps = \"true\" $env:OrchardCore__StatCan_Configuration__OverwriteSmtpSettings = \"true\" $env:OrchardCore__StatCan_Smtp__DefaultSender = \"no-reply@statcan.ca\" $env:OrchardCore__StatCan_Smtp__DeliveryMethod = \"0\" $env:OrchardCore__StatCan_Smtp__Host = \"smtp.jp.com\" $env:OrchardCore__StatCan_Smtp__AutoSelectEncryption = \"false\" $env:OrchardCore__StatCan_Smtp__EncryptionMethod = \"2\" $env:OrchardCore__StatCan_Smtp__Port = \"25\" $env:OrchardCore__StatCan_Smtp__RequireCredentials = \"true\" $env:OrchardCore__StatCan_Smtp__UseDefaultCredentials = \"false\" $env:OrchardCore__StatCan_Smtp__UserName = \"myusername\" $env:OrchardCore__StatCan_Smtp__Password = \"mysmtppassword\" Other Configuration \u00b6 This is how you can configure environment variables for the AllowedFileExtensions of media files $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__1 = \".jpeg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__2 = \".png\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__3 = \".gif\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__4 = \".ico\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__5 = \".svg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__6 = \".pdf\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__7 = \".doc\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__8 = \".docx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__9 = \".ppt\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__10 = \".pptx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__11 = \".pps\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__12 = \".ppsx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__13 = \".odt\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__14 = \".xls\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__15 = \".xlsx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__16 = \".psd\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__17 = \".mp3\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__18 = \".m4a\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__19 = \".ogg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__20 = \".wav\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__21 = \".mp4\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__22 = \".m4v\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__23 = \".mov\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__24 = \".wmv\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__25 = \".avi\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__26 = \".mpg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__27 = \".ogv\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__28 = \".3gp\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__29 = \".csv\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__30 = \".msg\"","title":"Configuration"},{"location":"reference/modules/Configuration/#deployment-configuration","text":"The StatCan.OrchardCore.Configuration library adds support for configuring persistent modules, smtp settings, reverse proxy setting and https settings with orchard's configuration .","title":"Deployment configuration"},{"location":"reference/modules/Configuration/#example-appsettingsjson","text":"{ \"OrchardCore\" : { \"Features\" : [ \"StatCan.OrchardCore.Configuration\" , \"OrchardCore.Email\" , \"OrchardCore.ReverseProxy\" , \"OrchardCore.Https\" ], \"StatCan_Configuration\" : { \"OverwriteSmtpSettings\" : true , \"OverwriteReverseProxySettings\" : true , \"OverwriteHttpsSettings\" : true }, \"StatCan_Smtp\" : { \"DefaultSender\" : \"no-reply@statcan.ca\" , \"DeliveryMethod\" : 0 , \"Host\" : \"smtp.statcan.ca\" , \"PickupDirectoryLocation\" : null , \"AutoSelectEncryption\" : false , \"EncryptionMethod\" : 2 , \"Port\" : 25 , \"RequireCredentials\" : true , \"UseDefaultCredentials\" : false , \"UserName\" : \"test\" , \"Password\" : \"mysmtppassword\" }, \"StatCan_Https\" : { \"RequireHttps\" : true , \"EnableStrictTransportSecurity\" : false , \"RequireHttpsPermanent\" : false , \"SslPort\" : null }, \"StatCan_ReverseProxy\" : { \"EnableXForwardedFor\" : true , \"EnableXForwardedHost\" : true , \"EnableXForwardedProto\" : true }, } }","title":"Example appsettings.json"},{"location":"reference/modules/Configuration/#sections","text":"","title":"Sections"},{"location":"reference/modules/Configuration/#statcan_configuration","text":"The variables in this section define if the related settings will be overwritten when the tenant activates. For example, if someone modifies the smtp settings from the Admin interface and the OverwriteSmtpSettings is set to true, the settings will be reset to those specified via configuration the next time the tenant activates.","title":"StatCan_Configuration"},{"location":"reference/modules/Configuration/#statcan_smtp","text":"This section will update Orchard's email module configuration .","title":"StatCan_Smtp"},{"location":"reference/modules/Configuration/#statcan_https","text":"This section will update Orchard's https module configuration .","title":"StatCan_Https"},{"location":"reference/modules/Configuration/#statcan_reverseproxy","text":"This section will update Orchard's reverse proxy module configuration .","title":"StatCan_ReverseProxy"},{"location":"reference/modules/Configuration/#environment-variables","text":"It is recommended to use environment variables to configure these settings in a production environment. # Configuration OrchardCore__StatCan_Configuration__OverwriteSmtpSettings: bool OrchardCore__StatCan_Configuration__OverwriteReverseProxySettings: bool OrchardCore__StatCan_Configuration__OverwriteHttpsSettings: bool # Smtp OrchardCore__StatCan_Smtp__DefaultSender: string OrchardCore__StatCan_Smtp__DeliveryMethod: 0 = Network ; 1 = SpecifiedPickupDirectory OrchardCore__StatCan_Smtp__Host: string OrchardCore__StatCan_Smtp__PickupDirectoryLocation: string OrchardCore__StatCan_Smtp__AutoSelectEncryption: bool OrchardCore__StatCan_Smtp__EncryptionMethod: 0 = none ; 1 = SSLTLS ; 2 = STARTTLS OrchardCore__StatCan_Smtp__Port: int OrchardCore__StatCan_Smtp__RequireCredentials: bool OrchardCore__StatCan_Smtp__UseDefaultCredentials: bool OrchardCore__StatCan_Smtp__UserName: string OrchardCore__StatCan_Smtp__Password: string ( unencrypted ) # Https OrchardCore__StatCan_Https__RequireHttps: bool OrchardCore__StatCan_Https__EnableStrictTransportSecurity: bool OrchardCore__StatCan_Https__RequireHttpsPermanent: bool OrchardCore__StatCan_Https__SslPort: int # ReverseProxy OrchardCore__StatCan_ReverseProxy__EnableXForwardedFor: bool OrchardCore__StatCan_ReverseProxy__EnableXForwardedHost: bool OrchardCore__StatCan_ReverseProxy__EnableXForwardedProto: bool # Features OrchardCore__Features__0: string OrchardCore__Features__1: string Here is an example on how to set these environment variables with powershell $env:OrchardCore__Features__0 = \"StatCan.OrchardCore.Configuration\" $env:OrchardCore__Features__1 = \"OrchardCore.ReverseProxy\" $env:OrchardCore__Features__2 = \"OrchardCore.Https\" $env:OrchardCore__StatCan_Configuration__OverwriteReverseProxySettings = \"true\" $env:OrchardCore__StatCan_ReverseProxy__EnableXForwardedFor = \"true\" $env:OrchardCore__StatCan_ReverseProxy__EnableXForwardedHost = \"true\" $env:OrchardCore__StatCan_ReverseProxy__EnableXForwardedProto = \"true\" $env:OrchardCore__StatCan_Configuration__OverwriteHttpsSettings = \"true\" $env:OrchardCore__StatCan_Https__RequireHttps = \"true\" $env:OrchardCore__StatCan_Configuration__OverwriteSmtpSettings = \"true\" $env:OrchardCore__StatCan_Smtp__DefaultSender = \"no-reply@statcan.ca\" $env:OrchardCore__StatCan_Smtp__DeliveryMethod = \"0\" $env:OrchardCore__StatCan_Smtp__Host = \"smtp.jp.com\" $env:OrchardCore__StatCan_Smtp__AutoSelectEncryption = \"false\" $env:OrchardCore__StatCan_Smtp__EncryptionMethod = \"2\" $env:OrchardCore__StatCan_Smtp__Port = \"25\" $env:OrchardCore__StatCan_Smtp__RequireCredentials = \"true\" $env:OrchardCore__StatCan_Smtp__UseDefaultCredentials = \"false\" $env:OrchardCore__StatCan_Smtp__UserName = \"myusername\" $env:OrchardCore__StatCan_Smtp__Password = \"mysmtppassword\"","title":"Environment variables"},{"location":"reference/modules/Configuration/#other-configuration","text":"This is how you can configure environment variables for the AllowedFileExtensions of media files $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__1 = \".jpeg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__2 = \".png\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__3 = \".gif\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__4 = \".ico\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__5 = \".svg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__6 = \".pdf\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__7 = \".doc\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__8 = \".docx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__9 = \".ppt\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__10 = \".pptx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__11 = \".pps\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__12 = \".ppsx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__13 = \".odt\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__14 = \".xls\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__15 = \".xlsx\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__16 = \".psd\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__17 = \".mp3\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__18 = \".m4a\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__19 = \".ogg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__20 = \".wav\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__21 = \".mp4\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__22 = \".m4v\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__23 = \".mov\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__24 = \".wmv\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__25 = \".avi\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__26 = \".mpg\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__27 = \".ogv\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__28 = \".3gp\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__29 = \".csv\" $env:OrchardCore__OrchardCore_Media__AllowedFileExtensions__30 = \".msg\"","title":"Other Configuration"},{"location":"reference/modules/ContentFields/","text":"ContentFields ( StatCan.OrchareCore.ContentFields ) \u00b6 TODO","title":"ContentFields"},{"location":"reference/modules/ContentFields/#contentfields-statcanorcharecorecontentfields","text":"TODO","title":"ContentFields (StatCan.OrchareCore.ContentFields)"},{"location":"reference/modules/EmailTemplates/","text":"EmailTemplates ( StatCan.OrchardCore.EmailTemplates ) \u00b6 The EmailTemplates module aims to simplify and accelerate the process of sending emails by using templates. EmailTemplate \u00b6 The EmailTemplate feature allow you do define reusable email templates. The fields of the templates support the Liquid language, which allows you to create dynamic emails for any content. EmailTemplate Document \u00b6 Field Definition Templates Dictionnary of email templates. Name Name of the email template. Description Description of the email template. Author The author's email address that defines who the email is from. With Liquid support. Sender The sender's email address. With Liquid support. ReplyTo The \"reply to\" email address. With Liquid support. Recipients The comma-separated list of recipient email addresses. With Liquid support. CC The comma-separated list of CC recipient email addresses. With Liquid support. BCC The comma-separated list of BCC recipient email addresses. With Liquid support. Subject The subject of the email message. With Liquid support. Body The body of the email message. With Liquid support. IsBodyHtml If checked, indicates the body of the email message is HTML. If unchecked, indicates the body of the email message is plain text. EmailTemplate Part \u00b6 The EmailTemplate Part allows you to link one or multiple email templates to any content type. Any instanciated content item from that content type will then act as the model for the email template. EmailTemplate Part Settings \u00b6 Field Definition SelectedEmailTemplates Array of templates ids that are currently linked to the content type. Summary Admin Integration \u00b6 Every content item with the Email Template part attached to its content type will be displayed with a dropdown of selected email templates. This will redirect you to the Send screen and will render the email using the selected content item as the model of the template. Workflow Intergration \u00b6 You will need to select an email template and provide a JavaScript expression that returns an object. This object item will be used as the model of the template. By default, the field is assigned the expression workflow().input[\"ContentItem\"] which returns the content item from the content created event. You can change it if needed. Please see the workflow documentation.","title":"EmailTemplates"},{"location":"reference/modules/EmailTemplates/#emailtemplates-statcanorchardcoreemailtemplates","text":"The EmailTemplates module aims to simplify and accelerate the process of sending emails by using templates.","title":"EmailTemplates (StatCan.OrchardCore.EmailTemplates)"},{"location":"reference/modules/EmailTemplates/#emailtemplate","text":"The EmailTemplate feature allow you do define reusable email templates. The fields of the templates support the Liquid language, which allows you to create dynamic emails for any content.","title":"EmailTemplate"},{"location":"reference/modules/EmailTemplates/#emailtemplate-document","text":"Field Definition Templates Dictionnary of email templates. Name Name of the email template. Description Description of the email template. Author The author's email address that defines who the email is from. With Liquid support. Sender The sender's email address. With Liquid support. ReplyTo The \"reply to\" email address. With Liquid support. Recipients The comma-separated list of recipient email addresses. With Liquid support. CC The comma-separated list of CC recipient email addresses. With Liquid support. BCC The comma-separated list of BCC recipient email addresses. With Liquid support. Subject The subject of the email message. With Liquid support. Body The body of the email message. With Liquid support. IsBodyHtml If checked, indicates the body of the email message is HTML. If unchecked, indicates the body of the email message is plain text.","title":"EmailTemplate Document"},{"location":"reference/modules/EmailTemplates/#emailtemplate-part","text":"The EmailTemplate Part allows you to link one or multiple email templates to any content type. Any instanciated content item from that content type will then act as the model for the email template.","title":"EmailTemplate Part"},{"location":"reference/modules/EmailTemplates/#emailtemplate-part-settings","text":"Field Definition SelectedEmailTemplates Array of templates ids that are currently linked to the content type.","title":"EmailTemplate Part Settings"},{"location":"reference/modules/EmailTemplates/#summary-admin-integration","text":"Every content item with the Email Template part attached to its content type will be displayed with a dropdown of selected email templates. This will redirect you to the Send screen and will render the email using the selected content item as the model of the template.","title":"Summary Admin Integration"},{"location":"reference/modules/EmailTemplates/#workflow-intergration","text":"You will need to select an email template and provide a JavaScript expression that returns an object. This object item will be used as the model of the template. By default, the field is assigned the expression workflow().input[\"ContentItem\"] which returns the content item from the content created event. You can change it if needed. Please see the workflow documentation.","title":"Workflow Intergration"},{"location":"reference/modules/GCCollab/","text":"GCCollab ( StatCan.OrchardCore.GCCollab ) \u00b6 This module add GCCollab as an Authentication provider to OrchardCore.","title":"GCCollab"},{"location":"reference/modules/GCCollab/#gccollab-statcanorchardcoregccollab","text":"This module add GCCollab as an Authentication provider to OrchardCore.","title":"GCCollab (StatCan.OrchardCore.GCCollab)"},{"location":"reference/modules/GitHub/","text":"GitHub ( StatCan.OrchardCore.GitHub ) \u00b6 This module adds the ability to interact with GitHub using OrchardCore. This is different than the authentication module OrchardCore.GitHub Your GitHub api token(s) must be set throught the Configuration -> Settings -> GitHub Api menu in the admin dashboard. Workflow \u00b6 Please see the workflow documentation for activities. Liquid \u00b6 Please see the liquid documentation for liquid filters.","title":"GitHub"},{"location":"reference/modules/GitHub/#github-statcanorchardcoregithub","text":"This module adds the ability to interact with GitHub using OrchardCore. This is different than the authentication module OrchardCore.GitHub Your GitHub api token(s) must be set throught the Configuration -> Settings -> GitHub Api menu in the admin dashboard.","title":"GitHub (StatCan.OrchardCore.GitHub)"},{"location":"reference/modules/GitHub/#workflow","text":"Please see the workflow documentation for activities.","title":"Workflow"},{"location":"reference/modules/GitHub/#liquid","text":"Please see the liquid documentation for liquid filters.","title":"Liquid"},{"location":"reference/modules/GraphQL/","text":"Queries.GraphQL ( StatCan.OrchardCore.Queries.GraphQL ) \u00b6 This module adds the GraphQL query type to Orchard's Query feature. This allows a site administrator to use the GraphQL syntax with queries. Please refer to the Queries documentation for details on how to use this query in your templates.","title":"GraphQL"},{"location":"reference/modules/GraphQL/#queriesgraphql-statcanorchardcorequeriesgraphql","text":"This module adds the GraphQL query type to Orchard's Query feature. This allows a site administrator to use the GraphQL syntax with queries. Please refer to the Queries documentation for details on how to use this query in your templates.","title":"Queries.GraphQL (StatCan.OrchardCore.Queries.GraphQL)"},{"location":"reference/modules/Hackathon/","text":"Hackathon Application Module ( StatCan.OrchardCore.Hackathon ) \u00b6 This module sets up a \"Hackathon Management\" application","title":"Hackathon App"},{"location":"reference/modules/Hackathon/#hackathon-application-module-statcanorchardcorehackathon","text":"This module sets up a \"Hackathon Management\" application","title":"Hackathon Application Module (StatCan.OrchardCore.Hackathon)"},{"location":"reference/modules/LocalizedText/","text":"LocalizedText ( StatCan.OrchardCore.LocalizedText ) \u00b6 This module adds a LocalizedText Part that stores [{ name, [{ culture, value}]}] objects. LocalizedTextPart \u00b6 Attach this part to your content items to have the ability to add name -> value pairs that vary by culture. Usages \u00b6 This part is meant to be used in cases where a Single ContentItem needs to hold localized values. As a \"best practice\" this should only be used when most of the data is non localizable and some is localizable. Liquid \u00b6 Please see the liquid documentation for liquid filters. Scripting \u00b6 Please see the scripting documentation","title":"LocalizedText"},{"location":"reference/modules/LocalizedText/#localizedtext-statcanorchardcorelocalizedtext","text":"This module adds a LocalizedText Part that stores [{ name, [{ culture, value}]}] objects.","title":"LocalizedText (StatCan.OrchardCore.LocalizedText)"},{"location":"reference/modules/LocalizedText/#localizedtextpart","text":"Attach this part to your content items to have the ability to add name -> value pairs that vary by culture.","title":"LocalizedTextPart"},{"location":"reference/modules/LocalizedText/#usages","text":"This part is meant to be used in cases where a Single ContentItem needs to hold localized values. As a \"best practice\" this should only be used when most of the data is non localizable and some is localizable.","title":"Usages"},{"location":"reference/modules/LocalizedText/#liquid","text":"Please see the liquid documentation for liquid filters.","title":"Liquid"},{"location":"reference/modules/LocalizedText/#scripting","text":"Please see the scripting documentation","title":"Scripting"},{"location":"reference/modules/Matomo/","text":"Matomo ( StatCan.OrchardCore.Matomo ) \u00b6 Integrates with Matomo analytics. This module injects the matomo tracking script into the site's pages.","title":"Matomo"},{"location":"reference/modules/Matomo/#matomo-statcanorchardcorematomo","text":"Integrates with Matomo analytics. This module injects the matomo tracking script into the site's pages.","title":"Matomo (StatCan.OrchardCore.Matomo)"},{"location":"reference/modules/Scheduling/","text":"Scheduling Application Module ( StatCan.OrchardCore.Scheduling ) \u00b6 This module sets up a \"Scheduling\" Application for creating and managing appointments for an organization.","title":"Scheduling App"},{"location":"reference/modules/Scheduling/#scheduling-application-module-statcanorchardcorescheduling","text":"This module sets up a \"Scheduling\" Application for creating and managing appointments for an organization.","title":"Scheduling Application Module (StatCan.OrchardCore.Scheduling)"},{"location":"reference/modules/VueForms/","text":"VueForms ( StatCan.OrchardCore.VueForms ) \u00b6 The VueForms module aims to simplify the creation of client side forms in OrchardCore. Content definitions \u00b6 VueForm \u00b6 The VueForm content type is used to create forms that use VueJs and VeeValidate client side libraries. The form submission is handled via an ajax call to a generic controller that returns json to the client for seamless server side validation. VueForm Part \u00b6 Field Definition Disabled If disabled, the DisabledHtml field value will be displayed instead of the form RenderAs Render the Form as a Vue Component, a Vue App or Vuetify app DisabledHtml Html displayed when the form is disabled. SuccessMessage The success message returned to the client when the form is valid and no redirect is specified after submission. With Liquid support. Template The component template. With Liquid support. Debug mode Enables debug mode on the form. Note about RenderAs : When rendering the Form as a VueComponent , you need to define a Zone in your layout called DynamicComponentZone . This zone must be rendered anywhere before the FootScript resource zone. This is required because the div that defines the VueForm component needs to be defined outside of the Vue App. Please look at our open source VuetifyTheme layout for an example. {% render_section \"DynamicComponentZone\", required: false %} {% resources type: \"FootScript\" %} Template \u00b6 The template of the vue component Example: < v-container > < v-card-text > < v-row justify = \"center\" > < v-col cols = \"8\" > < validation-provider name = \"{{ \" nameLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-text-field v-model = \"name\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" nameLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" emailLabel \" | localize | downcase }}\" rules = \"required|email\" v-slot = \"{ errors }\" > < v-text-field v-model = \"email\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" emailLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" messageLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-textarea v-model = \"message\" :error-messages = \"errors\" counter = \"true\" filled = \"filled\" label = \"{{ \" messageLabel \" | localize }}\" rows = \"5\" > </ v-textarea > </ validation-provider > </ v-col > < v-col cols = \"8\" > < v-alert type = \"success\" v-if = \"form.successMessage\" > {% raw %}{{ form.successMessage }}{% endraw %} </ v-alert > < v-alert type = \"error\" v-if = \"form.errorMessage\" > {% raw %}{{ form.errorMessage }}{% endraw %} </ v-alert > </ v-col > < v-col cols = \"8\" > < v-btn type = \"submit\" depressed block @ click = \"formHandleSubmit\" :disabled = \"form.submitting\" > {{ \"submitLabel\" | localize }} </ v-btn > </ v-col > </ v-row > </ v-card-text > </ v-container > Available Props \u00b6 The VueForm component has some default properties and methods. You can access these properties in your templates or in the component options object. Name Definition obs.* All props available on the v-slot of the ValidationObserver are available. formReset A method that resets the form.* properties to the initial state. Does not reset your component's data. () => void formHandleSubmit A method that calls the validate() method and then, if valid, sends an ajax request to our controller () => void form.submitting Set to true when the form is being submitted. form.submitSuccess Set to true when no redirect is specified and the submission was a success. form.successMessage The success message returned from the server as specified in the VueForm form.submitValidationError Set to true when a server validation error occus. form.serverValidationMessage Array of errors set by the server with the addError('serverValidationMessage', 'Message') scripting method. form.responseData The raw response data recieved from the server. Useful if you want to return additional data to the form via a workflow. form.submitError Set to true when a server error, ajax error or unhandled error occurs. form.serverErrorMessage An error message set with the ajax error status code and text. Only set when a server errors occur. Debug mode \u00b6 Debug mode is typically used when developping a form. Additional information is returned by the server and any data output by the debug() scripting method is also output and returned with the HttpResponse. This mode does not work when previewing the form. VueFormScripts Part \u00b6 Field Definition ClientInit A client side script that is executed prior to instanciating the VueJs app. ComponentOptions The VueJS component options object for your VueForm component. OnValidation Server side validation script that allows us to validate the form. OnSubmitted Server side script that runs if the form is valid ClientInit script \u00b6 The ClientInit script is executed client side prior to instanciating the form component. This script has access to the client's global scope variables. This was added to support hooking into some global options for VeeValidate. For example, setting the VeeValidate.setInteractionMode('passive') option or the Localization option. VeeValidate . setInteractionMode ( \"passive\" ); OnValidation script \u00b6 The OnValidation script is used to specify the server side validation script. We are planning to implement components with integrated validation in the future. This module adds some scripting methods to facilitate handling form data and errors. Here is an example OnValidation script that validates that the name is required. Note : the first parameter of addError must be your input name that must also match the VeeValidate ValidationProvider name. var data = requestFormAsJsonObject (); if ( data . name == \"\" ) { addError ( \"name\" , \"The name is required\" ); } All errors are also available to the client Vue component via the form.responseData.errors property OnSubmitted script \u00b6 The OnSubmitted script is executed after the OnValidation script, only if the form is valid. This is where you would typically create a contentItem from the form data or redirect the user to another page. Here is an example OnSubmitted script that redirects the user to a success page after having created the PersonInfo content item. var data = requestFormAsJsonObject (); createContentItem ( \"PersonInfo\" , true , { PersonInfo : { Name : { Text : data . name }, Email : { Text : data . email }, Gender : { Text : data . gender } } }); // redirects to the success page httpRedirect ( \"~/success\" ); Component Options object \u00b6 This is where you write the VueJS component options object for the form component. At a minimum, you must define the data object. By default, the entire data object is serialized and sent to the server when the form is submitted. { data : () => ({ items : [ \"Female\" , \"Male\" , \"Other\" ], name : \"\" , email : \"\" , gender : undefined }); } You can also overwrite the submitData() method to customize what is sent to the server. This can be very useful when your data object contains list of items for a dropdown. { data : () => ({ items : [ \"Female\" , \"Male\" , \"Other\" ], name : \"\" , email : \"\" , gender : undefined }), submitData () { return { name : this . name , email : this . email , gender : this . gender }; }, } Custom Form Components \u00b6 The sections below decribes the custom form components provided by this module. Multiselect components \u00b6 The module exposes two multiselect components: multiselect-async and multiselect . These components are wrappers of the multiselect component from the vue-multiselect library. The api of the base vue-multiselect component can be found here . multiselect-async component \u00b6 The multiselect-async component allows async loading of options from an api. Props Definition value The holder of the selected options api The url of the api that the options are coming from success A boolean representing the validation result error-messages Messages to show when validation fails All the other props are the same as the base multiselect component. multiselect component \u00b6 The multiselect component provides a multiselect feature without async loading of options. Props Definition value The holder of the selected options success A boolean representing the validation result error-messages Messages to show when validation fails All the other props are the same as the base multiselect component. Bag component \u00b6 The bag component provides a bag behaviour to the form. A bag is a collection of field groups. The bag component behaves similar to the BagPart in Orchard Core. Props Definition value The holder of the selected options over the entire bag valueNames The name of the value object of each individual field in a field group add-button-label The label of the add button remove-button-label The label of the remove button success A boolean representing the validation result. errorMessages Messages to show when validation fails Below is an example of the value object: value : [{ field1 : \"field1Value\" , field2 : \"field2Value\" }]; The general form of the value object is an array of objects. Each object represents a group of fields. Each proprety represents the value of a specific field. The valueNames prop is a string array of the proprety name used in the field group objects in the value object. For example, the valueNames array corresponding to the value object given above is valueNames : [ \"field1\" , \"field2\" ]; Bag component example \u00b6 Here is an example of using the bag component < validation-provider name = \"Bag\" rules = \"required\" v-slot = \"{ errors, valid }\" > < bag v-model = \"bagValues\" :valueNames = \"valueNames\" :success = \"valid\" :error-messages = \"errors\" add-button-label = \"Add\" remove-button-label = \"-\" > < template # validations > < validation-provider rules = \"required\" name = \"Field 1\" ></ validation-provider > < validation-provider rules = \"required\" name = \"Field 2\" ></ validation-provider > </ template > < template # components > < v-text-field filled = \"filled\" label = \"label\" > </ v-text-field > < v-text-field filled = \"filled\" label = \"label\" > </ v-text-field > </ template > < template # title > < div class = \"text-h5 mb-5\" > Bag </ div > </ template > </ bag > </ validation-provider > The data object is: { data : () => ({ bagValues : [{ field1 : \"field1\" , field2 : \"field2\" }], valueNames : [ \"field1\" , \"field2\" ] }) } The bag component can be wrapped in a validation-provider just like any other field components. The bag component has three slots. The validations slots contains the validation-provider for each field in the field groups. The components slot contains the actual field components. The title slot contains components representing the title of the bag component. The components in the validations and components slots are prototypes. For example, whenever the add button is clicked, the components defined in those two slots will be \"instantiated\". Some notes on using the bag component \u00b6 Components defined in the validations and components slots should not contain any children. Ignore v-slot=\"{ errors, valid }\" when defining validation-provider components in the validations slot because it is handled by the bag component. Ignore v-model , :success , and :error-messages when defining components in the components slots because they are handled by the bag component. Scripting \u00b6 Please see the scripting documentation. Workflow integration \u00b6 Although this module does not require a workflow to handle the form submissions, we still provide a workflow hook to support performing some additional actions. Please see the workflow documentation. If you do use a workflow, you can use the addError(\"name\", \"message\"); script to add form errors. You can also use the HttpRedirect or HttpResponse workflow tasks to redirect or return a custom set of data to the client. All data returned by the HttpResponse task is available via the form.responseData object. You should also be able to use the debug() scripting method to return debugging data to the client. Localization ( StatCan.OrchardCore.VueForms.Localized ) \u00b6 While you can use Orchard's LocalizationPart to localize your forms. We suggest you use the LocalizedText feature to implement i18n in your forms. This part is what we weld to your VueForm content type when you enable this feature. The [locale] shortcode is also useful to use in your views to localize simple text fields. Survey ( StatCan.OrchardCore.VueForms.Survey ) \u00b6 Adds SurveyJS support to VueForms. This adds a part to the VueForm where you can specify the SurveyJS creator json object. In the Template, simply write this to output a Survey that uses the SurveyJS json object < survey :survey = \"survey\" ></ survey > To get the json output of the survey on your server side scripts, simply use the getSurveyData() method. const surveyData = getSurveyData (); debug ( \"surveyData\" , surveyData ); Examples \u00b6 The following example forms are provided with the VueForms module as recipes: Contact Form UserProfile Form UserProfile Form \u00b6 This form allows you to edit a UserProfile Content Type with the CustomUserSettings stereotype. For this form to work, you must enable the Users Change Email feature along with allowing users to update their email in the settings.","title":"VueForms"},{"location":"reference/modules/VueForms/#vueforms-statcanorchardcorevueforms","text":"The VueForms module aims to simplify the creation of client side forms in OrchardCore.","title":"VueForms (StatCan.OrchardCore.VueForms)"},{"location":"reference/modules/VueForms/#content-definitions","text":"","title":"Content definitions"},{"location":"reference/modules/VueForms/#vueform","text":"The VueForm content type is used to create forms that use VueJs and VeeValidate client side libraries. The form submission is handled via an ajax call to a generic controller that returns json to the client for seamless server side validation.","title":"VueForm"},{"location":"reference/modules/VueForms/#vueform-part","text":"Field Definition Disabled If disabled, the DisabledHtml field value will be displayed instead of the form RenderAs Render the Form as a Vue Component, a Vue App or Vuetify app DisabledHtml Html displayed when the form is disabled. SuccessMessage The success message returned to the client when the form is valid and no redirect is specified after submission. With Liquid support. Template The component template. With Liquid support. Debug mode Enables debug mode on the form. Note about RenderAs : When rendering the Form as a VueComponent , you need to define a Zone in your layout called DynamicComponentZone . This zone must be rendered anywhere before the FootScript resource zone. This is required because the div that defines the VueForm component needs to be defined outside of the Vue App. Please look at our open source VuetifyTheme layout for an example. {% render_section \"DynamicComponentZone\", required: false %} {% resources type: \"FootScript\" %}","title":"VueForm Part"},{"location":"reference/modules/VueForms/#template","text":"The template of the vue component Example: < v-container > < v-card-text > < v-row justify = \"center\" > < v-col cols = \"8\" > < validation-provider name = \"{{ \" nameLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-text-field v-model = \"name\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" nameLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" emailLabel \" | localize | downcase }}\" rules = \"required|email\" v-slot = \"{ errors }\" > < v-text-field v-model = \"email\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" emailLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" messageLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-textarea v-model = \"message\" :error-messages = \"errors\" counter = \"true\" filled = \"filled\" label = \"{{ \" messageLabel \" | localize }}\" rows = \"5\" > </ v-textarea > </ validation-provider > </ v-col > < v-col cols = \"8\" > < v-alert type = \"success\" v-if = \"form.successMessage\" > {% raw %}{{ form.successMessage }}{% endraw %} </ v-alert > < v-alert type = \"error\" v-if = \"form.errorMessage\" > {% raw %}{{ form.errorMessage }}{% endraw %} </ v-alert > </ v-col > < v-col cols = \"8\" > < v-btn type = \"submit\" depressed block @ click = \"formHandleSubmit\" :disabled = \"form.submitting\" > {{ \"submitLabel\" | localize }} </ v-btn > </ v-col > </ v-row > </ v-card-text > </ v-container >","title":"Template"},{"location":"reference/modules/VueForms/#available-props","text":"The VueForm component has some default properties and methods. You can access these properties in your templates or in the component options object. Name Definition obs.* All props available on the v-slot of the ValidationObserver are available. formReset A method that resets the form.* properties to the initial state. Does not reset your component's data. () => void formHandleSubmit A method that calls the validate() method and then, if valid, sends an ajax request to our controller () => void form.submitting Set to true when the form is being submitted. form.submitSuccess Set to true when no redirect is specified and the submission was a success. form.successMessage The success message returned from the server as specified in the VueForm form.submitValidationError Set to true when a server validation error occus. form.serverValidationMessage Array of errors set by the server with the addError('serverValidationMessage', 'Message') scripting method. form.responseData The raw response data recieved from the server. Useful if you want to return additional data to the form via a workflow. form.submitError Set to true when a server error, ajax error or unhandled error occurs. form.serverErrorMessage An error message set with the ajax error status code and text. Only set when a server errors occur.","title":"Available Props"},{"location":"reference/modules/VueForms/#debug-mode","text":"Debug mode is typically used when developping a form. Additional information is returned by the server and any data output by the debug() scripting method is also output and returned with the HttpResponse. This mode does not work when previewing the form.","title":"Debug mode"},{"location":"reference/modules/VueForms/#vueformscripts-part","text":"Field Definition ClientInit A client side script that is executed prior to instanciating the VueJs app. ComponentOptions The VueJS component options object for your VueForm component. OnValidation Server side validation script that allows us to validate the form. OnSubmitted Server side script that runs if the form is valid","title":"VueFormScripts Part"},{"location":"reference/modules/VueForms/#clientinit-script","text":"The ClientInit script is executed client side prior to instanciating the form component. This script has access to the client's global scope variables. This was added to support hooking into some global options for VeeValidate. For example, setting the VeeValidate.setInteractionMode('passive') option or the Localization option. VeeValidate . setInteractionMode ( \"passive\" );","title":"ClientInit script"},{"location":"reference/modules/VueForms/#onvalidation-script","text":"The OnValidation script is used to specify the server side validation script. We are planning to implement components with integrated validation in the future. This module adds some scripting methods to facilitate handling form data and errors. Here is an example OnValidation script that validates that the name is required. Note : the first parameter of addError must be your input name that must also match the VeeValidate ValidationProvider name. var data = requestFormAsJsonObject (); if ( data . name == \"\" ) { addError ( \"name\" , \"The name is required\" ); } All errors are also available to the client Vue component via the form.responseData.errors property","title":"OnValidation script"},{"location":"reference/modules/VueForms/#onsubmitted-script","text":"The OnSubmitted script is executed after the OnValidation script, only if the form is valid. This is where you would typically create a contentItem from the form data or redirect the user to another page. Here is an example OnSubmitted script that redirects the user to a success page after having created the PersonInfo content item. var data = requestFormAsJsonObject (); createContentItem ( \"PersonInfo\" , true , { PersonInfo : { Name : { Text : data . name }, Email : { Text : data . email }, Gender : { Text : data . gender } } }); // redirects to the success page httpRedirect ( \"~/success\" );","title":"OnSubmitted script"},{"location":"reference/modules/VueForms/#component-options-object","text":"This is where you write the VueJS component options object for the form component. At a minimum, you must define the data object. By default, the entire data object is serialized and sent to the server when the form is submitted. { data : () => ({ items : [ \"Female\" , \"Male\" , \"Other\" ], name : \"\" , email : \"\" , gender : undefined }); } You can also overwrite the submitData() method to customize what is sent to the server. This can be very useful when your data object contains list of items for a dropdown. { data : () => ({ items : [ \"Female\" , \"Male\" , \"Other\" ], name : \"\" , email : \"\" , gender : undefined }), submitData () { return { name : this . name , email : this . email , gender : this . gender }; }, }","title":"Component Options object"},{"location":"reference/modules/VueForms/#custom-form-components","text":"The sections below decribes the custom form components provided by this module.","title":"Custom Form Components"},{"location":"reference/modules/VueForms/#multiselect-components","text":"The module exposes two multiselect components: multiselect-async and multiselect . These components are wrappers of the multiselect component from the vue-multiselect library. The api of the base vue-multiselect component can be found here .","title":"Multiselect components"},{"location":"reference/modules/VueForms/#multiselect-async-component","text":"The multiselect-async component allows async loading of options from an api. Props Definition value The holder of the selected options api The url of the api that the options are coming from success A boolean representing the validation result error-messages Messages to show when validation fails All the other props are the same as the base multiselect component.","title":"multiselect-async component"},{"location":"reference/modules/VueForms/#multiselect-component","text":"The multiselect component provides a multiselect feature without async loading of options. Props Definition value The holder of the selected options success A boolean representing the validation result error-messages Messages to show when validation fails All the other props are the same as the base multiselect component.","title":"multiselect component"},{"location":"reference/modules/VueForms/#bag-component","text":"The bag component provides a bag behaviour to the form. A bag is a collection of field groups. The bag component behaves similar to the BagPart in Orchard Core. Props Definition value The holder of the selected options over the entire bag valueNames The name of the value object of each individual field in a field group add-button-label The label of the add button remove-button-label The label of the remove button success A boolean representing the validation result. errorMessages Messages to show when validation fails Below is an example of the value object: value : [{ field1 : \"field1Value\" , field2 : \"field2Value\" }]; The general form of the value object is an array of objects. Each object represents a group of fields. Each proprety represents the value of a specific field. The valueNames prop is a string array of the proprety name used in the field group objects in the value object. For example, the valueNames array corresponding to the value object given above is valueNames : [ \"field1\" , \"field2\" ];","title":"Bag component"},{"location":"reference/modules/VueForms/#bag-component-example","text":"Here is an example of using the bag component < validation-provider name = \"Bag\" rules = \"required\" v-slot = \"{ errors, valid }\" > < bag v-model = \"bagValues\" :valueNames = \"valueNames\" :success = \"valid\" :error-messages = \"errors\" add-button-label = \"Add\" remove-button-label = \"-\" > < template # validations > < validation-provider rules = \"required\" name = \"Field 1\" ></ validation-provider > < validation-provider rules = \"required\" name = \"Field 2\" ></ validation-provider > </ template > < template # components > < v-text-field filled = \"filled\" label = \"label\" > </ v-text-field > < v-text-field filled = \"filled\" label = \"label\" > </ v-text-field > </ template > < template # title > < div class = \"text-h5 mb-5\" > Bag </ div > </ template > </ bag > </ validation-provider > The data object is: { data : () => ({ bagValues : [{ field1 : \"field1\" , field2 : \"field2\" }], valueNames : [ \"field1\" , \"field2\" ] }) } The bag component can be wrapped in a validation-provider just like any other field components. The bag component has three slots. The validations slots contains the validation-provider for each field in the field groups. The components slot contains the actual field components. The title slot contains components representing the title of the bag component. The components in the validations and components slots are prototypes. For example, whenever the add button is clicked, the components defined in those two slots will be \"instantiated\".","title":"Bag component example"},{"location":"reference/modules/VueForms/#some-notes-on-using-the-bag-component","text":"Components defined in the validations and components slots should not contain any children. Ignore v-slot=\"{ errors, valid }\" when defining validation-provider components in the validations slot because it is handled by the bag component. Ignore v-model , :success , and :error-messages when defining components in the components slots because they are handled by the bag component.","title":"Some notes on using the bag component"},{"location":"reference/modules/VueForms/#scripting","text":"Please see the scripting documentation.","title":"Scripting"},{"location":"reference/modules/VueForms/#workflow-integration","text":"Although this module does not require a workflow to handle the form submissions, we still provide a workflow hook to support performing some additional actions. Please see the workflow documentation. If you do use a workflow, you can use the addError(\"name\", \"message\"); script to add form errors. You can also use the HttpRedirect or HttpResponse workflow tasks to redirect or return a custom set of data to the client. All data returned by the HttpResponse task is available via the form.responseData object. You should also be able to use the debug() scripting method to return debugging data to the client.","title":"Workflow integration"},{"location":"reference/modules/VueForms/#localization-statcanorchardcorevueformslocalized","text":"While you can use Orchard's LocalizationPart to localize your forms. We suggest you use the LocalizedText feature to implement i18n in your forms. This part is what we weld to your VueForm content type when you enable this feature. The [locale] shortcode is also useful to use in your views to localize simple text fields.","title":"Localization (StatCan.OrchardCore.VueForms.Localized)"},{"location":"reference/modules/VueForms/#survey-statcanorchardcorevueformssurvey","text":"Adds SurveyJS support to VueForms. This adds a part to the VueForm where you can specify the SurveyJS creator json object. In the Template, simply write this to output a Survey that uses the SurveyJS json object < survey :survey = \"survey\" ></ survey > To get the json output of the survey on your server side scripts, simply use the getSurveyData() method. const surveyData = getSurveyData (); debug ( \"surveyData\" , surveyData );","title":"Survey (StatCan.OrchardCore.VueForms.Survey)"},{"location":"reference/modules/VueForms/#examples","text":"The following example forms are provided with the VueForms module as recipes: Contact Form UserProfile Form","title":"Examples"},{"location":"reference/modules/VueForms/#userprofile-form","text":"This form allows you to edit a UserProfile Content Type with the CustomUserSettings stereotype. For this form to work, you must enable the Users Change Email feature along with allowing users to update their email in the settings.","title":"UserProfile Form"},{"location":"reference/themes/DigitalAdmin/","text":"Digital Admin Theme \u00b6 The theme used for the admin dashboard. Adds a language toggle at the top.","title":"DigitalAdmin"},{"location":"reference/themes/DigitalAdmin/#digital-admin-theme","text":"The theme used for the admin dashboard. Adds a language toggle at the top.","title":"Digital Admin Theme"},{"location":"reference/themes/PortalTheme/","text":"Portal Theme \u00b6","title":"PortalTheme"},{"location":"reference/themes/PortalTheme/#portal-theme","text":"","title":"Portal Theme"},{"location":"reference/themes/VuetifyTheme/","text":"Vuetify Theme \u00b6 The Vuetify Theme aims to simplify the creation of client side apps in OrchardCore. Offering vuetify components as widgets, the Vuetify Theme makes it easy to compose rich Material Design pages from the Admin UI. Widgets \u00b6 VAlert \u00b6 Field Definition Border Puts a border on the alert. Accepts top , right , bottom , left . Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Colored Border Applies the defined color to the alert\u2019s border. Dark Applies the dark theme variant to the component. Dense Hides the alert icon and decreases component\u2019s height. Dismissible Adds a close icon that can hide the alert. Elevation Designates an elevation applied to the component between 0 and 24. You can find more information on the elevation page . Icon Designates a specific icon. Light Applies the light theme variant to the component. Outlined Makes the background transparent and applies a thin border. Prominent Displays a larger vertically centered icon to draw more attention. Shaped Applies a large border radius on the top left and bottom right of the card. Text Applies the defined color to text and a low opacity background of the same. Tile Removes the component\u2019s border-radius. Type Specify a success , info , warning or error alert. Uses the contextual color and has a pre-defined icon. VAppBar \u00b6 This widget is best used in the Header zone. Field Definition Absolute Applies position: absolute to the component. Background Image Adds an image to the app-bar background Bottom Aligns the component towards the bottom. Collapse Puts the toolbar into a collapsed state reducing its maximum width. Collapse On Scroll Puts the app-bar into a collapsed state when scrolling. Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Dark Applies the dark theme variant to the component. Dense Reduces the height of the toolbar content to 48px (96px when using the prominent prop). Elevate On Scroll Elevates the app-bar when scrolling. Elevation Designates an elevation applied to the component between 0 and 24. You can find more information on the elevation page . Extended Use this prop to increase the height of the toolbar without using the extension slot for adding content. May be used in conjunction with the extension-height prop, and any of the other props that affect the height of the toolbar, e.g. prominent , dense , etc., WITH THE EXCEPTION of height . Extension Height Specify an explicit height for the extension slot. Fade Image On Scroll When using the src prop or img slot, will fade the image when scrolling. Fixed Applies position: fixed to the component. Flat Removes the toolbar\u2019s box-shadow. Floating Applies display: inline-flex to the component. Height Designates a specific height for the toolbar. Overrides the heights imposed by other props, e.g. prominent , dense , extended , etc. Hide On Scroll Hides the app-bar when scrolling. Will still show the extension slot. Inverted Scroll Hides the app-bar when scrolling down and displays it when scrolling up. Light Applies the light theme variant to the component. Outlined Makes the background transparent and applies a thin border. Prominent Increases the height of the toolbar content to 128px. Scroll Off Screen Hides the app-bar when scrolling. Will NOT show the extension slot. Scroll Threshold The amount of scroll distance down before hide-on-scroll activates. Shaped Applies a large border radius on the top left and bottom right of the app-bar. Short Reduce the height of the toolbar content to 56px (112px when using the prominent prop). Shrink On Scroll Shrinks a prominent toolbar to a dense or short (default) one when scrolling. Tile Removes the component\u2019s border-radius. Width Sets the width for the component. VCard \u00b6 Field Definition Title Applies a header to the card. Subtitle Applies a subheader to the card. Content Allows free-form HTML. Actions Call-to-action buttons for the card. VCol \u00b6 Field Definition Align Self Applies the align-items css property. Available options are start , center , end , auto , baseline and stretch . Cols [Breakpoint] Sets the default number of columns the component extends. Available options are 1 -> 12 and auto . Offset [Breakpoint] Sets the default offset for the column. Order [Breakpoint] Sets the default order for the column. Flow Any number of widgets can be added to the component. VContainer \u00b6 Field Definition Fluid Removes viewport maximum-width size breakpoints. Flow Any number of VRow s can be added to the component VDivider \u00b6 Field Definition Dark Applies the dark theme variant to the component. Inset Adds indentation (72px) for normal dividers, reduces max height for vertical. Light Applies the light theme variant to the component. Vertical Displays dividers vertically VExpansionPanel \u00b6 Field Definition Header Sets the expansion-panel header. Flow Any number of widgets can be added to the component. VExpansionPanels \u00b6 Field Definition Accordion Removes the margin around open panels. Dark Applies the dark theme variant to the component. Disabled Disables the entire expansion-panel. Flat Removes the expansion-panel\u2019s elevation and borders. Focusable Makes the expansion-panel headers focusable. Inset Makes the expansion-panel open with a inset style. Light Applies the light theme variant to the component. Mandatory Forces a value to always be selected (if available). Multiple Allow multiple selections. Popout Makes the expansion-panel open with an popout style. Read-Only Makes the entire expansion-panel read only. Tile Removes the border-radius. Flow Any number of VExpansionPanel s can be added to the component VFooter \u00b6 This widget is best used in the Footer zone. Field Definition Absolute Applies position: absolute to the component. App Designates the component as part of the application layout. Used for dynamically adjusting content sizing. Components using this prop should reside outside of v-main component to function properly. You can find more information about layouts on the application page. Note: this prop automatically applies position: fixed to the layout element. Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Dark Applies the dark theme variant to the component. Elevation Designates an elevation applied to the component between 0 and 24. You can find more information on the elevation page . Fixed Applies position: fixed to the component. Height Designates a specific height for the component. Light Applies the light theme variant to the component. Outlined Makes the background transparent and applies a thin border. Rounded Designates the border-radius applied to the component. You can find more information on the Border Radius page . Padless Remove all padding from the footer. Shaped Applies a large border radius on the top left and bottom right of the footer. Tile Removes the component\u2019s border-radius. Width Sets the width for the component. VImg \u00b6 Field Definition Alternate Text Alternate text for screen readers. Leave empty for decorative images. Aspect Ratio Calculated as width/height , so for a 1920x1080px image this will be 1.7778 . Will be calculated automatically if omitted. Contain Prevents the image from being cropped if it doesn\u2019t fit. Dark Applies the dark theme variant to the component. Eager Will force the components content to render on mounted. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO. Gradient Overlays a gradient onto the image. Only supports linear-gradient syntax, anything else should be done with classes (see examples). Height Sets the height for the component. Light Applies the light theme variant to the component. Source The image. This field is mandatory. Width Sets the width for the component. VList \u00b6 Field Definition Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Dark Applies the dark theme variant to the component. Dense Lowers max height of list tiles. Disabled Disables all children v-list-item components Elevation Designates an elevation applied to the component between 0 and 24. Expand Will only collapse when explicitly closed Flat Remove the highlighted background on active v-list-items Height Sets the height for the component. Light Applies the light theme variant to the component. Nav An alternative styling that reduces v-list-item width and rounds the corners. Outlines Removes elevation (box-shadow) and adds a thin border. Rounded Rounds the v-list-item edges. Shaped Provides an alternative active style for v-list-item. Subheader Removes top padding. Used when previous sibling is a header. Tag Specify a custom tag used on the root element. Tile Removes the component\u2019s border-radius. Width Sets the width for the component. VListItem \u00b6 Field Definition Active-Class Configure the active CSS class applied when the link is active. Color Applies specified color to the control when in an active state or input-value is true - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)) Exact-Active-Class Configure the active CSS class applied when the link is active with exact match. Href Designates the component as anchor and applies the href attribute. Icon Name Designates a specific icon. Input-Value Controls the active state of the item. This is typically used to highlight the component. Target Designates the target attribute. This should only be applied when using the href prop. To Denotes the target route of the link. VNavigationDrawer \u00b6 This widget is best used in the Navigation Drawer zone. Field Definition Absolute Applies position: absolute to the component. Background Image Adds an image to the navigation-drawer background Bottom Expands from the bottom of the screen on mobile devices. Clipped A clipped drawer rests under the application toolbar. Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Disable Resize Watcher Will automatically open/close drawer when resized depending if mobile or desktop. Disable Route Watcher Disables opening of navigation drawer when route changes. Expand On Hover Collapses the drawer to a mini-variant until hovering with the mouse. Floating A floating drawer has no visible container (no border-right). Height Sets the height of the navigation drawer. Hide Overlay Hides the display of the overlay. Light Applies the light theme variant to the component. Mini Condenses navigation drawer width, also accepts the .sync modifier. With this, the drawer will re-open when clicking it. Mini Variant Width Designates the width assigned when the mini prop is turned on. Mobile Breakpoint Sets the designated mobile breakpoint for the component. This will apply alternate styles for mobile devices such as the temporary prop, or activate the bottom prop when the breakpoint value is met. Setting the value to 0 will disable this functionality. Overlay Color Sets the overlay color. Overlay Opacity Sets the overlay opacity. Permanent The drawer remains visible regardless of screen size. Right Places the navigation drawer on the right. Stateless Remove all automated state functionality (resize, mobile, route) and manually control the drawer state. Temporary A temporary drawer sits above its application and uses a scrim (overlay) to darken the background. Touchless Disable mobile touch functionality. Width Sets the width for the component. VRow \u00b6 Field Definition Align [Breakpoint] Applies the align-items css property. Available options are start , center , end , baseline and stretch . Align Content [Breakpoint] Applies the align-content css property. Available options are start , center , end , space-between , space-around and stretch . Dense Reduces the gutter between VCol s. Justify [Breakpoint] Applies the justify-content css property. Available options are start , center , end , space-between and space-around . No Gutter Removes the gutter between VCol s. Flow Any number of VCol s can be added to the component. VSubheader \u00b6 Field Definition Dark Applies the dark theme variant to the component. Inset Adds indentation (72px) Light Applies the light theme variant to the component. VTimeLine \u00b6 Field Definition Align-Top Align caret and dot of timeline items to the top. Dark Applies the dark theme variant to the component. Dense Hide opposite slot content, and position all items to one side of timeline. Light Applies the light theme variant to the component. Reverse Reverse direction of timeline items. VTimeLineItem \u00b6 Field Definition Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Dark Applies the dark theme variant to the component. Icon Specify icon for dot container Icon-Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Fill-Dot Remove padding from dot container Hide-Dot Hide display of timeline dot Large Large size dot Left Explicitly set the item to a left orientation Light Applies the light theme variant to the component. Right Explicitly set the item to a right orientation. Small Small size dot. Shortcodes \u00b6 A collection of shortcodes are available as a recipe for the vuetify theme. The container, row, col and divider shortcodes are available if you execute the Vuetify Grid System Shortcodes recipe.","title":"VuetifyTheme"},{"location":"reference/themes/VuetifyTheme/#vuetify-theme","text":"The Vuetify Theme aims to simplify the creation of client side apps in OrchardCore. Offering vuetify components as widgets, the Vuetify Theme makes it easy to compose rich Material Design pages from the Admin UI.","title":"Vuetify Theme"},{"location":"reference/themes/VuetifyTheme/#widgets","text":"","title":"Widgets"},{"location":"reference/themes/VuetifyTheme/#valert","text":"Field Definition Border Puts a border on the alert. Accepts top , right , bottom , left . Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Colored Border Applies the defined color to the alert\u2019s border. Dark Applies the dark theme variant to the component. Dense Hides the alert icon and decreases component\u2019s height. Dismissible Adds a close icon that can hide the alert. Elevation Designates an elevation applied to the component between 0 and 24. You can find more information on the elevation page . Icon Designates a specific icon. Light Applies the light theme variant to the component. Outlined Makes the background transparent and applies a thin border. Prominent Displays a larger vertically centered icon to draw more attention. Shaped Applies a large border radius on the top left and bottom right of the card. Text Applies the defined color to text and a low opacity background of the same. Tile Removes the component\u2019s border-radius. Type Specify a success , info , warning or error alert. Uses the contextual color and has a pre-defined icon.","title":"VAlert"},{"location":"reference/themes/VuetifyTheme/#vappbar","text":"This widget is best used in the Header zone. Field Definition Absolute Applies position: absolute to the component. Background Image Adds an image to the app-bar background Bottom Aligns the component towards the bottom. Collapse Puts the toolbar into a collapsed state reducing its maximum width. Collapse On Scroll Puts the app-bar into a collapsed state when scrolling. Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Dark Applies the dark theme variant to the component. Dense Reduces the height of the toolbar content to 48px (96px when using the prominent prop). Elevate On Scroll Elevates the app-bar when scrolling. Elevation Designates an elevation applied to the component between 0 and 24. You can find more information on the elevation page . Extended Use this prop to increase the height of the toolbar without using the extension slot for adding content. May be used in conjunction with the extension-height prop, and any of the other props that affect the height of the toolbar, e.g. prominent , dense , etc., WITH THE EXCEPTION of height . Extension Height Specify an explicit height for the extension slot. Fade Image On Scroll When using the src prop or img slot, will fade the image when scrolling. Fixed Applies position: fixed to the component. Flat Removes the toolbar\u2019s box-shadow. Floating Applies display: inline-flex to the component. Height Designates a specific height for the toolbar. Overrides the heights imposed by other props, e.g. prominent , dense , extended , etc. Hide On Scroll Hides the app-bar when scrolling. Will still show the extension slot. Inverted Scroll Hides the app-bar when scrolling down and displays it when scrolling up. Light Applies the light theme variant to the component. Outlined Makes the background transparent and applies a thin border. Prominent Increases the height of the toolbar content to 128px. Scroll Off Screen Hides the app-bar when scrolling. Will NOT show the extension slot. Scroll Threshold The amount of scroll distance down before hide-on-scroll activates. Shaped Applies a large border radius on the top left and bottom right of the app-bar. Short Reduce the height of the toolbar content to 56px (112px when using the prominent prop). Shrink On Scroll Shrinks a prominent toolbar to a dense or short (default) one when scrolling. Tile Removes the component\u2019s border-radius. Width Sets the width for the component.","title":"VAppBar"},{"location":"reference/themes/VuetifyTheme/#vcard","text":"Field Definition Title Applies a header to the card. Subtitle Applies a subheader to the card. Content Allows free-form HTML. Actions Call-to-action buttons for the card.","title":"VCard"},{"location":"reference/themes/VuetifyTheme/#vcol","text":"Field Definition Align Self Applies the align-items css property. Available options are start , center , end , auto , baseline and stretch . Cols [Breakpoint] Sets the default number of columns the component extends. Available options are 1 -> 12 and auto . Offset [Breakpoint] Sets the default offset for the column. Order [Breakpoint] Sets the default order for the column. Flow Any number of widgets can be added to the component.","title":"VCol"},{"location":"reference/themes/VuetifyTheme/#vcontainer","text":"Field Definition Fluid Removes viewport maximum-width size breakpoints. Flow Any number of VRow s can be added to the component","title":"VContainer"},{"location":"reference/themes/VuetifyTheme/#vdivider","text":"Field Definition Dark Applies the dark theme variant to the component. Inset Adds indentation (72px) for normal dividers, reduces max height for vertical. Light Applies the light theme variant to the component. Vertical Displays dividers vertically","title":"VDivider"},{"location":"reference/themes/VuetifyTheme/#vexpansionpanel","text":"Field Definition Header Sets the expansion-panel header. Flow Any number of widgets can be added to the component.","title":"VExpansionPanel"},{"location":"reference/themes/VuetifyTheme/#vexpansionpanels","text":"Field Definition Accordion Removes the margin around open panels. Dark Applies the dark theme variant to the component. Disabled Disables the entire expansion-panel. Flat Removes the expansion-panel\u2019s elevation and borders. Focusable Makes the expansion-panel headers focusable. Inset Makes the expansion-panel open with a inset style. Light Applies the light theme variant to the component. Mandatory Forces a value to always be selected (if available). Multiple Allow multiple selections. Popout Makes the expansion-panel open with an popout style. Read-Only Makes the entire expansion-panel read only. Tile Removes the border-radius. Flow Any number of VExpansionPanel s can be added to the component","title":"VExpansionPanels"},{"location":"reference/themes/VuetifyTheme/#vfooter","text":"This widget is best used in the Footer zone. Field Definition Absolute Applies position: absolute to the component. App Designates the component as part of the application layout. Used for dynamically adjusting content sizing. Components using this prop should reside outside of v-main component to function properly. You can find more information about layouts on the application page. Note: this prop automatically applies position: fixed to the layout element. Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Dark Applies the dark theme variant to the component. Elevation Designates an elevation applied to the component between 0 and 24. You can find more information on the elevation page . Fixed Applies position: fixed to the component. Height Designates a specific height for the component. Light Applies the light theme variant to the component. Outlined Makes the background transparent and applies a thin border. Rounded Designates the border-radius applied to the component. You can find more information on the Border Radius page . Padless Remove all padding from the footer. Shaped Applies a large border radius on the top left and bottom right of the footer. Tile Removes the component\u2019s border-radius. Width Sets the width for the component.","title":"VFooter"},{"location":"reference/themes/VuetifyTheme/#vimg","text":"Field Definition Alternate Text Alternate text for screen readers. Leave empty for decorative images. Aspect Ratio Calculated as width/height , so for a 1920x1080px image this will be 1.7778 . Will be calculated automatically if omitted. Contain Prevents the image from being cropped if it doesn\u2019t fit. Dark Applies the dark theme variant to the component. Eager Will force the components content to render on mounted. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO. Gradient Overlays a gradient onto the image. Only supports linear-gradient syntax, anything else should be done with classes (see examples). Height Sets the height for the component. Light Applies the light theme variant to the component. Source The image. This field is mandatory. Width Sets the width for the component.","title":"VImg"},{"location":"reference/themes/VuetifyTheme/#vlist","text":"Field Definition Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Dark Applies the dark theme variant to the component. Dense Lowers max height of list tiles. Disabled Disables all children v-list-item components Elevation Designates an elevation applied to the component between 0 and 24. Expand Will only collapse when explicitly closed Flat Remove the highlighted background on active v-list-items Height Sets the height for the component. Light Applies the light theme variant to the component. Nav An alternative styling that reduces v-list-item width and rounds the corners. Outlines Removes elevation (box-shadow) and adds a thin border. Rounded Rounds the v-list-item edges. Shaped Provides an alternative active style for v-list-item. Subheader Removes top padding. Used when previous sibling is a header. Tag Specify a custom tag used on the root element. Tile Removes the component\u2019s border-radius. Width Sets the width for the component.","title":"VList"},{"location":"reference/themes/VuetifyTheme/#vlistitem","text":"Field Definition Active-Class Configure the active CSS class applied when the link is active. Color Applies specified color to the control when in an active state or input-value is true - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)) Exact-Active-Class Configure the active CSS class applied when the link is active with exact match. Href Designates the component as anchor and applies the href attribute. Icon Name Designates a specific icon. Input-Value Controls the active state of the item. This is typically used to highlight the component. Target Designates the target attribute. This should only be applied when using the href prop. To Denotes the target route of the link.","title":"VListItem"},{"location":"reference/themes/VuetifyTheme/#vnavigationdrawer","text":"This widget is best used in the Navigation Drawer zone. Field Definition Absolute Applies position: absolute to the component. Background Image Adds an image to the navigation-drawer background Bottom Expands from the bottom of the screen on mobile devices. Clipped A clipped drawer rests under the application toolbar. Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). You can find list of built in classes on the colors page . Disable Resize Watcher Will automatically open/close drawer when resized depending if mobile or desktop. Disable Route Watcher Disables opening of navigation drawer when route changes. Expand On Hover Collapses the drawer to a mini-variant until hovering with the mouse. Floating A floating drawer has no visible container (no border-right). Height Sets the height of the navigation drawer. Hide Overlay Hides the display of the overlay. Light Applies the light theme variant to the component. Mini Condenses navigation drawer width, also accepts the .sync modifier. With this, the drawer will re-open when clicking it. Mini Variant Width Designates the width assigned when the mini prop is turned on. Mobile Breakpoint Sets the designated mobile breakpoint for the component. This will apply alternate styles for mobile devices such as the temporary prop, or activate the bottom prop when the breakpoint value is met. Setting the value to 0 will disable this functionality. Overlay Color Sets the overlay color. Overlay Opacity Sets the overlay opacity. Permanent The drawer remains visible regardless of screen size. Right Places the navigation drawer on the right. Stateless Remove all automated state functionality (resize, mobile, route) and manually control the drawer state. Temporary A temporary drawer sits above its application and uses a scrim (overlay) to darken the background. Touchless Disable mobile touch functionality. Width Sets the width for the component.","title":"VNavigationDrawer"},{"location":"reference/themes/VuetifyTheme/#vrow","text":"Field Definition Align [Breakpoint] Applies the align-items css property. Available options are start , center , end , baseline and stretch . Align Content [Breakpoint] Applies the align-content css property. Available options are start , center , end , space-between , space-around and stretch . Dense Reduces the gutter between VCol s. Justify [Breakpoint] Applies the justify-content css property. Available options are start , center , end , space-between and space-around . No Gutter Removes the gutter between VCol s. Flow Any number of VCol s can be added to the component.","title":"VRow"},{"location":"reference/themes/VuetifyTheme/#vsubheader","text":"Field Definition Dark Applies the dark theme variant to the component. Inset Adds indentation (72px) Light Applies the light theme variant to the component.","title":"VSubheader"},{"location":"reference/themes/VuetifyTheme/#vtimeline","text":"Field Definition Align-Top Align caret and dot of timeline items to the top. Dark Applies the dark theme variant to the component. Dense Hide opposite slot content, and position all items to one side of timeline. Light Applies the light theme variant to the component. Reverse Reverse direction of timeline items.","title":"VTimeLine"},{"location":"reference/themes/VuetifyTheme/#vtimelineitem","text":"Field Definition Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Dark Applies the dark theme variant to the component. Icon Specify icon for dot container Icon-Color Applies specified color to the control - it can be the name of material color (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Fill-Dot Remove padding from dot container Hide-Dot Hide display of timeline dot Large Large size dot Left Explicitly set the item to a left orientation Light Applies the light theme variant to the component. Right Explicitly set the item to a right orientation. Small Small size dot.","title":"VTimeLineItem"},{"location":"reference/themes/VuetifyTheme/#shortcodes","text":"A collection of shortcodes are available as a recipe for the vuetify theme. The container, row, col and divider shortcodes are available if you execute the Vuetify Grid System Shortcodes recipe.","title":"Shortcodes"}]}