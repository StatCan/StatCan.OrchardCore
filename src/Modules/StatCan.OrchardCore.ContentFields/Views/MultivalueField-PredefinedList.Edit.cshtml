@using StatCan.OrchardCore.ContentFields.Multivalue.Settings
@model StatCan.OrchardCore.ContentFields.Multivalue.ViewModels.EditMultivalueFieldViewModel
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@{
  var partName = Model.PartFieldDefinition.PartDefinition.Name;
  var fieldName = Model.PartFieldDefinition.Name;
  var vueElementId = $"Picker_{partName}_{fieldName}_{Guid.NewGuid().ToString("n")}";

  var settings = Model.PartFieldDefinition.GetSettings<MultivalueFieldSettings>();
  var listSettings = Model.PartFieldDefinition.GetSettings<MultivalueFieldEditorSettings>();

  var options = new List<SelectListItem>();
  var selectedValues = Model.Values;
  var selectedItems = new List<SelectListItem>();

  foreach (var option in listSettings.Options)
  {
    var isSelected = selectedValues.Contains(option.Value); 
  
    options.Add(new SelectListItem { Text = option.Name, Value = option.Value, Selected = isSelected });

    if (isSelected) {
      selectedItems.Add(new SelectListItem { Text = option.Name, Value = option.Value });
    }
  }
  var serializedOptions = JsonConvert.SerializeObject(selectedItems, new JsonSerializerSettings {  });
}

<script asp-name="vue-multiselect-wrapper" asp-src="~/StatCan.OrchardCore.ContentFields/Scripts/vue-multiselect-wrapper.js" at="Foot" depends-on="vuejs, vue-multiselect, sortable, vuedraggable"></script>
<style asp-name="vue-multiselect-wrapper" asp-src="~/StatCan.OrchardCore.ContentFields/Styles/vue-multiselect-wrapper.min.css" debug-src="~/StatCan.OrchardCore.ContentFields/Styles/vue-multiselect-wrapper.css" depends-on="vue-multiselect"></style>

<div class="form-group">
  <label asp-for="Values">@Model.PartFieldDefinition.DisplayName()</label>
  @if (listSettings.Editor == StatCan.OrchardCore.ContentFields.Multivalue.Settings.EditorOption.Checkbox)
  {
    var i = 0;
    @foreach (var option in options)
    {
      <div class="custom-control custom-checkbox" asp-for="Values">
        @Html.CheckBox("Values", option.Selected, new { @class = "custom-control-input content-preview-text",
          id = Html.IdFor(m => m.Values) + "_" + i, value = option.Value })
        <label class="custom-control-label" for="@(Html.IdFor(m => m.Values) + "_" + i)">@option.Text</label>
      </div>
      i++;
    }
  }

  @if (listSettings.Editor == StatCan.OrchardCore.ContentFields.Multivalue.Settings.EditorOption.Picker)
  {
    <div id="@vueElementId" class="vue-multiselect" data-part="@partName" data-field="@fieldName" data-editor-type="ContentPicker" data-selected-items="@serializedOptions" data-multiple="true">
        <div class="form-group">
            <ul class="list-group w-xl-50 content-picker-default__list" v-show="arrayOfItems.length" v-cloak>
                <draggable v-model="arrayOfItems">
                    <li v-for="(item, i) in arrayOfItems"
                        class="cursor-move list-group-item content-picker-default__list-item d-flex align-items-start justify-content-between"
                        :key="item">
                        <div class="align-items-center align-self-center"><span>{{ item.Text }}</span></div>
                        <div class="btn-group btn-group-sm align-items-center" role="group">
                            <button v-on:click="remove(item)" type="button" class="btn btn-secondary content-picker-default__list-item__delete"><i class="fa fa-trash fa-sm" aria-hidden="true"></i></button>
                        </div>
                    </li>
                </draggable>
            </ul>
        </div>

        <div class="form-group">
            <div class="w-xl-50">
                <input asp-for="Values" type="hidden" v-model="selectedValues" />
                <vue-multiselect v-model="serializedOptions" :options="options" track-by="id"
                                label="Text" @@select="onSelect"
                                :searchable="true" :close-on-select="true" :reset-after="true"
                                :show-labels="true" :hide-selected="true"
                                :disabled="isDisabled"
                                select-label="@T["Select"]" deselect-label="@T["Remove"]">
                  <template slot="option" slot-scope="props">
                      <div v-cloak><span>{{ props.option.Name }}</span></div>
                  </template>
                  <template slot="noResult">
                      @T["No result found"]
                  </template>
                </vue-multiselect>
                @if (!String.IsNullOrEmpty(settings.Hint))
                {
                    <span class="hint">@settings.Hint</span>
                }
            </div>
        </div>
    </div>
  }

  @if (listSettings.Editor == StatCan.OrchardCore.ContentFields.Multivalue.Settings.EditorOption.Dropdown)
  {
    <label asp-for="Values">@Model.PartFieldDefinition.DisplayName()</label>
    <select class="form-control content-preview-select" asp-for="Values" asp-items="options"></select>
  }

    @if (!String.IsNullOrEmpty(settings.Hint))
  {
    <span class="hint">â€” @settings.Hint</span>
  }
</div>

<script at="Foot" depends-on="vue-multiselect-wrapper">initVueMultiselect(document.querySelector("#@vueElementId"))</script>
