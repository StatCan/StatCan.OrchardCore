@using StatCan.OrchardCore.AjaxForms.Models
@{
    var part = ((ContentItem)Model.ContentItem).As<FormTextInput>();

    var name = part.Name.Text;
    var type = part.Type.Text;

    var label = part.Name.Text;
    var placeholder = part.Placeholder.Text;
    var helptext = part.HelpText.Text;
    // validation
    var isRequired = part.Required.Value;
    var validText = part.ValidText.Text;
    var invalidText = part.InvalidText.Text;
    
    // classes
    var wrapperClass = part.WrapperClass?.Text ?? "form-group";;
    var labelClass = part.LabelClass?.Text;
    var inputClass = part.InputClass?.Text ?? "form-control";

    var fieldId = !string.IsNullOrEmpty(name) ? Html.GenerateIdFromName(name) : default(string);
    if(!string.IsNullOrEmpty(wrapperClass)) 
    {
      Model.Classes.Add(wrapperClass);
    }
    
    if(isRequired) 
    {
      Model.Classes.Add("required");
    }
}
  <div class='form-control-wrapper @string.Join(" ", Model.Classes)'>

    <label class="@labelClass" for="@fieldId">@label</label>
    <input required="@isRequired" id="@fieldId" name="@name" type="@type" class="@inputClass" placeholder="@placeholder" aria-describedby="@fieldId-described-by" />
    
    <div id="@fieldId-described-by">
      @if (!string.IsNullOrWhiteSpace(helptext))
      {
        <small class="form-text">@helptext</small>
      }
      @if (!string.IsNullOrWhiteSpace(validText))
      {
        <div class="valid-feedback">@validText</div>
      }
      @if (!string.IsNullOrWhiteSpace(invalidText))
      {
        <div class="invalid-feedback">@invalidText</div>
      }
     </div>
  </div>
