@using OrchardCore.ContentManagement
@using OrchardCore.Flows.Models
@using OrchardCore.Flows.ViewModels
@using StatCan.OrchardCore.VueForms.Models
@using OrchardCore.Mvc.Utilities;

@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@model FlowPartViewModel

@{
    var contentItem = ((ContentItem)Model.FlowPart.ContentItem);
    var formPart = ((ContentItem)Model.FlowPart.ContentItem).As<VueForm>();


    var scripts = contentItem.As<VueFormScripts>();

    var script = await Orchard.LiquidAsync(scripts.ClientInitScript?.Text, contentItem);
}
<div class="vue-form" script="@Orchard.B64Encode(script)">
  <v-app>
    <validation-observer ref="obs" slim v-slot="{ invalid, validated, handleSubmit, validate, setErrors, reset }">
      <v-form ref="form"
              id="@formPart.ContentItem.ContentItemId"
              v-on:submit.prevent="handleSubmit"
              action="@Url.Action("Submit","VueForm", new {area="StatCan.OrchardCore.VueForms" , formId=Model.FlowPart.ContentItem.ContentItemId })"
              method="post"
              novalidate>
        @Html.AntiForgeryToken()
        @foreach (var widget in Model.FlowPart.Widgets)
        {
          var widgetContent = await ContentItemDisplayManager.BuildDisplayAsync(widget, Model.BuildPartDisplayContext.Updater, Model.BuildPartDisplayContext.DisplayType, Model.BuildPartDisplayContext.GroupId);

          @await DisplayAsync(widgetContent)     
        }
      <v-form>
    </validation-observer>
  </v-app>
</div>