/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

"use strict"; // register VeeValidate components globally

Vue.component('validation-provider', VeeValidate.ValidationProvider);
Vue.component('validation-observer', VeeValidate.ValidationObserver); // include default english and french translations.

VeeValidate.localize({
  en: {
    "code": "en",
    "messages": {
      "alpha": "The {_field_} field may only contain alphabetic characters",
      "alpha_num": "The {_field_} field may only contain alpha-numeric characters",
      "alpha_dash": "The {_field_} field may contain alpha-numeric characters as well as dashes and underscores",
      "alpha_spaces": "The {_field_} field may only contain alphabetic characters as well as spaces",
      "between": "The {_field_} field must be between {min} and {max}",
      "confirmed": "The {_field_} field confirmation does not match",
      "digits": "The {_field_} field must be numeric and exactly contain {length} digits",
      "dimensions": "The {_field_} field must be {width} pixels by {height} pixels",
      "email": "The {_field_} field must be a valid email",
      "excluded": "The {_field_} field is not a valid value",
      "ext": "The {_field_} field is not a valid file",
      "image": "The {_field_} field must be an image",
      "integer": "The {_field_} field must be an integer",
      "length": "The {_field_} field must be {length} long",
      "max_value": "The {_field_} field must be {max} or less",
      "max": "The {_field_} field may not be greater than {length} characters",
      "mimes": "The {_field_} field must have a valid file type",
      "min_value": "The {_field_} field must be {min} or more",
      "min": "The {_field_} field must be at least {length} characters",
      "numeric": "The {_field_} field may only contain numeric characters",
      "oneOf": "The {_field_} field is not a valid value",
      "regex": "The {_field_} field format is invalid",
      "required_if": "The {_field_} field is required",
      "required": "The {_field_} field is required",
      "size": "The {_field_} field size must be less than {size}KB"
    }
  },
  fr: {
    "code": "fr",
    "messages": {
      "alpha": "Le champ {_field_} ne peut contenir que des lettres",
      "alpha_num": "Le champ {_field_} ne peut contenir que des caractères alpha-numériques",
      "alpha_dash": "Le champ {_field_} ne peut contenir que des caractères alpha-numériques, tirets ou soulignés",
      "alpha_spaces": "Le champ {_field_} ne peut contenir que des lettres ou des espaces",
      "between": "Le champ {_field_} doit être compris entre {min} et {max}",
      "confirmed": "Le champ {_field_} ne correspond pas",
      "digits": "Le champ {_field_} doit être un nombre entier de {length} chiffres",
      "dimensions": "Le champ {_field_} doit avoir une taille de {width} pixels par {height} pixels",
      "email": "Le champ {_field_} doit être une adresse e-mail valide",
      "excluded": "Le champ {_field_} doit être une valeur valide",
      "ext": "Le champ {_field_} doit être un fichier valide",
      "image": "Le champ {_field_} doit être une image",
      "integer": "Le champ {_field_} doit être un entier",
      "length": "Le champ {_field_} doit contenir {length} caractères",
      "max_value": "Le champ {_field_} doit avoir une valeur de {max} ou moins",
      "max": "Le champ {_field_} ne peut pas contenir plus de {length} caractères",
      "mimes": "Le champ {_field_} doit avoir un type MIME valide",
      "min_value": "Le champ {_field_} doit avoir une valeur de {min} ou plus",
      "min": "Le champ {_field_} doit contenir au minimum {length} caractères",
      "numeric": "Le champ {_field_} ne peut contenir que des chiffres",
      "oneOf": "Le champ {_field_} doit être une valeur valide",
      "regex": "Le champ {_field_} est invalide",
      "required": "Le champ {_field_} est obligatoire",
      "required_if": "Le champ {_field_} est obligatoire lorsque {target} possède cette valeur",
      "size": "Le champ {_field_} doit avoir un poids inférieur à {size}KB"
    }
  }
}); // run init script

function initForm(app) {
  var vuetify;
  var initScriptResult = null; // Set VeeValidate language based on the lang parameter

  VeeValidate.localize(app.dataset.lang); // run the vue-form init script provided in the OC admin ui

  var appScript = app.dataset.script;

  if (appScript) {
    var initFn = new Function(atob(appScript));
    initScriptResult = initFn();
  }

  if (initScriptResult) {
    vuetify = initScriptResult;
  } else {
    vuetify = new Vuetify();
  } // register all vue components coming from the admin ui


  var vueComponentsElements = app.querySelectorAll("[data-vf-name]");
  vueComponentsElements.forEach(function (x) {
    var name = x.dataset.vfName;
    var encodedScript = x.dataset.vfScript;

    if (encodedScript) {
      var script = atob(encodedScript);
      var getVueObject = new Function("\n        var component = ".concat(script, ";\n        Object.assign(component, {name: '").concat(name, "', props: \n          ['obs-valid',\n          'obs-invalid',\n          'obs-reset',\n          'obs-validate',\n          'form-handle-submit',\n          'form-success-message',\n          'form-error-message',\n          'form-ajax-error-status',\n          'form-ajax-error-text']\n        });\n        return Vue.component('").concat(name, "', component);\n        "));
      getVueObject();
    }
  }); // instanciate the top level vue component

  new Vue({
    el: app,
    vuetify: vuetify,
    data: function data() {
      return {
        ajaxErrorStatus: undefined,
        ajaxErrorText: undefined,
        successMessage: undefined,
        errorMessage: undefined
      };
    },
    methods: {
      formHandleSubmit: function formHandleSubmit() {
        var _this = this;

        // cleanup any error / server success message
        Object.assign(this.$data, this.$options.data.apply(this)); // keep a reference to the VeeValidate observer

        var observer = this.$refs.obs;
        observer.validate().then(function (valid) {
          if (valid) {
            var vm = _this;
            var action = _this.$refs.form.$attrs.action;
            var serializedForm = $("#" + _this.$refs.form.$attrs.id).serialize();
            $.ajax({
              type: "POST",
              url: action,
              data: serializedForm,
              cache: false,
              dataType: "json",
              success: function success(data) {
                // if there are validation errors on the form, display them.
                if (data.validationError) {
                  vm.errorMessage = data.errorMessage;
                  observer.setErrors(data.errors);
                  return;
                } // if the server sends a redirect, reload the window


                if (data.redirect) {
                  window.location.href = data.redirect;
                  return;
                } //success, set the form success message


                if (data.success) {
                  vm.successMessage = data.successMessage;
                  return;
                } // something went wrong, dev issue


                vm.errorMessage = "Something wen't wrong. Please report this to your site administrators. Error code: `VueForms.AjaxHandler`";
              },
              error: function error(xhr, status, errorThrown) {
                // this might be dependent on the server side and might need some tweaking
                vm.ajaxErrorStatus = xhr.status;
                vm.ajaxErrorText = xhr.errorThrown;
              }
            });
          }
        });
      }
    }
  });
} // look for all vue forms when this script is loaded and initialize them


document.querySelectorAll(".vue-form").forEach(initForm);