/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function () {
  var isUndefined = function isUndefined(value) {
    return value === undefined;
  };

  var isNull = function isNull(value) {
    return value === null;
  };

  var isBoolean = function isBoolean(value) {
    return typeof value === 'boolean';
  };

  var isObject = function isObject(value) {
    return value === Object(value);
  };

  var isArray = function isArray(value) {
    return Array.isArray(value);
  };

  var isDate = function isDate(value) {
    return value instanceof Date;
  };

  var isBlob = function isBlob(value) {
    return value && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.slice === 'function';
  };

  var isFile = function isFile(value) {
    return isBlob(value) && typeof value.name === 'string' && (_typeof(value.lastModifiedDate) === 'object' || typeof value.lastModified === 'number');
  };

  var serialize = function serialize(obj, cfg, fd, pre) {
    cfg = cfg || {};
    cfg.indices = isUndefined(cfg.indices) ? false : cfg.indices;
    cfg.nullsAsUndefineds = isUndefined(cfg.nullsAsUndefineds) ? false : cfg.nullsAsUndefineds;
    cfg.booleansAsIntegers = isUndefined(cfg.booleansAsIntegers) ? false : cfg.booleansAsIntegers;
    cfg.allowEmptyArrays = isUndefined(cfg.allowEmptyArrays) ? false : cfg.allowEmptyArrays;
    fd = fd || new FormData();

    if (isUndefined(obj)) {
      return fd;
    } else if (isNull(obj)) {
      if (!cfg.nullsAsUndefineds) {
        fd.append(pre, '');
      }
    } else if (isBoolean(obj)) {
      if (cfg.booleansAsIntegers) {
        fd.append(pre, obj ? 1 : 0);
      } else {
        fd.append(pre, obj);
      }
    } else if (isArray(obj)) {
      if (obj.length) {
        obj.forEach(function (value, index) {
          var key = pre + '[' + (cfg.indices ? index : '') + ']';
          serialize(value, cfg, fd, key);
        });
      } else if (cfg.allowEmptyArrays) {
        fd.append(pre + '[]', '');
      }
    } else if (isDate(obj)) {
      fd.append(pre, obj.toISOString());
    } else if (isObject(obj) && !isFile(obj) && !isBlob(obj)) {
      Object.keys(obj).forEach(function (prop) {
        var value = obj[prop];

        if (isArray(value)) {
          while (prop.length > 2 && prop.lastIndexOf('[]') === prop.length - 2) {
            prop = prop.substring(0, prop.length - 2);
          }
        }

        var key = pre ? pre + '[' + prop + ']' : prop;
        serialize(value, cfg, fd, key);
      });
    } else {
      fd.append(pre, obj);
    }

    return fd;
  };

  window.serializeToFormData = serialize;
})();
// register VeeValidate components globally
Vue.component('validation-provider', VeeValidate.ValidationProvider);
Vue.component('validation-observer', VeeValidate.ValidationObserver); // include default english and french translations.

VeeValidate.localize({
  en: {
    "code": "en",
    "messages": {
      "alpha": "The {_field_} field may only contain alphabetic characters",
      "alpha_num": "The {_field_} field may only contain alpha-numeric characters",
      "alpha_dash": "The {_field_} field may contain alpha-numeric characters as well as dashes and underscores",
      "alpha_spaces": "The {_field_} field may only contain alphabetic characters as well as spaces",
      "between": "The {_field_} field must be between {min} and {max}",
      "confirmed": "The {_field_} field confirmation does not match",
      "digits": "The {_field_} field must be numeric and exactly contain {length} digits",
      "dimensions": "The {_field_} field must be {width} pixels by {height} pixels",
      "email": "The {_field_} field must be a valid email",
      "excluded": "The {_field_} field is not a valid value",
      "ext": "The {_field_} field is not a valid file",
      "image": "The {_field_} field must be an image",
      "integer": "The {_field_} field must be an integer",
      "length": "The {_field_} field must be {length} long",
      "max_value": "The {_field_} field must be {max} or less",
      "max": "The {_field_} field may not be greater than {length} characters",
      "mimes": "The {_field_} field must have a valid file type",
      "min_value": "The {_field_} field must be {min} or more",
      "min": "The {_field_} field must be at least {length} characters",
      "numeric": "The {_field_} field may only contain numeric characters",
      "oneOf": "The {_field_} field is not a valid value",
      "regex": "The {_field_} field format is invalid",
      "required_if": "The {_field_} field is required",
      "required": "The {_field_} field is required",
      "size": "The {_field_} field size must be less than {size}KB"
    }
  },
  fr: {
    "code": "fr",
    "messages": {
      "alpha": "Le champ {_field_} ne peut contenir que des lettres",
      "alpha_num": "Le champ {_field_} ne peut contenir que des caractères alpha-numériques",
      "alpha_dash": "Le champ {_field_} ne peut contenir que des caractères alpha-numériques, tirets ou soulignés",
      "alpha_spaces": "Le champ {_field_} ne peut contenir que des lettres ou des espaces",
      "between": "Le champ {_field_} doit être compris entre {min} et {max}",
      "confirmed": "Le champ {_field_} ne correspond pas",
      "digits": "Le champ {_field_} doit être un nombre entier de {length} chiffres",
      "dimensions": "Le champ {_field_} doit avoir une taille de {width} pixels par {height} pixels",
      "email": "Le champ {_field_} doit être une adresse e-mail valide",
      "excluded": "Le champ {_field_} doit être une valeur valide",
      "ext": "Le champ {_field_} doit être un fichier valide",
      "image": "Le champ {_field_} doit être une image",
      "integer": "Le champ {_field_} doit être un entier",
      "length": "Le champ {_field_} doit contenir {length} caractères",
      "max_value": "Le champ {_field_} doit avoir une valeur de {max} ou moins",
      "max": "Le champ {_field_} ne peut pas contenir plus de {length} caractères",
      "mimes": "Le champ {_field_} doit avoir un type MIME valide",
      "min_value": "Le champ {_field_} doit avoir une valeur de {min} ou plus",
      "min": "Le champ {_field_} doit contenir au minimum {length} caractères",
      "numeric": "Le champ {_field_} ne peut contenir que des chiffres",
      "oneOf": "Le champ {_field_} doit être une valeur valide",
      "regex": "Le champ {_field_} est invalide",
      "required": "Le champ {_field_} est obligatoire",
      "required_if": "Le champ {_field_} est obligatoire lorsque {target} possède cette valeur",
      "size": "Le champ {_field_} doit avoir un poids inférieur à {size}KB"
    }
  }
});
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function decodeUnicode(str) {
  return decodeURIComponent(atob(str).split("").map(function (c) {
    return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(""));
} // run init script


function initForm(app) {
  // Set VeeValidate language based on the lang parameter
  VeeValidate.localize(app.dataset.lang);
  var componentOptions = app.dataset.options;
  var parsedOptions = {};

  if (componentOptions) {
    var fn = new Function("return (".concat(decodeUnicode(componentOptions), ");"));
    parsedOptions = fn();

    if (!parsedOptions) {
      console.log("Could not parse the componentOptions object. Make sure your object is well formed.");
    }
  }

  var _parsedOptions = parsedOptions,
      parsedData = _parsedOptions.data,
      parsedMethods = _parsedOptions.methods,
      parsedRest = _objectWithoutProperties(_parsedOptions, ["data", "methods"]);

  var objData = parsedData;

  if (typeof parsedData === "function") {
    objData = parsedData();
  }

  var defaultFormData = {
    submitting: false,
    submitSuccess: false,
    successMessage: undefined,
    submitError: false,
    submitValidationErrors: false,
    serverValidationMessage: undefined,
    serverErrorMessage: undefined,
    responseData: undefined
  };
  Vue.component(app.dataset.name, function (resolve) {
    resolve(_objectSpread(_objectSpread({}, parsedRest), {}, {
      template: "#".concat(app.dataset.name),
      data: function data() {
        return _objectSpread(_objectSpread({}, objData), {}, {
          form: _objectSpread({}, defaultFormData)
        });
      },
      methods: _objectSpread(_objectSpread({
        // default method that return the data to be submitted to the server
        // this was added first to allow the Administrator to edit this function on the OC Admin
        submitData: function submitData() {
          return _objectSpread({}, this.$data);
        }
      }, parsedMethods), {}, {
        formReset: function formReset() {
          this.form = _objectSpread({}, defaultFormData); // also reset the VeeValidate observer

          this.$refs.obs.reset();
        },
        formHandleSubmit: function formHandleSubmit(e) {
          var _this = this;

          e.preventDefault();
          var vm = this; // keep a reference to the VeeValidate observer

          var observer = vm.$refs.obs;
          observer.validate().then(function (valid) {
            if (valid) {
              var action = vm.$refs.form.getAttribute("action"); // set form vue data

              vm.form.submitting = true;
              var frmData = vm.submitData();
              frmData.__RequestVerificationToken = vm.$refs.form.querySelector('input[name="__RequestVerificationToken"]').value;

              if ((typeof grecaptcha === "undefined" ? "undefined" : _typeof(grecaptcha)) == "object") {
                frmData.recaptcha = grecaptcha.getResponse();
              }

              var formData = window.serializeToFormData(frmData); // iterate all file inputs and add the files to the request

              $(_this.$refs.form).find("input[type=file]").each(function () {
                var _iterator = _createForOfIteratorHelper(this.files),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var file = _step.value;
                    formData.append(file.name, file);
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              });
              $.ajax({
                type: "POST",
                url: action,
                data: formData,
                cache: false,
                dataType: "json",
                // expect json from the server
                processData: false,
                //tell jquery not to process data
                contentType: false,
                //tell jquery not to set content-type
                success: function success(data) {
                  vm.form = _objectSpread({}, defaultFormData);
                  vm.form.responseData = data; // if there are validation errors on the form, display them.

                  if (data.validationError) {
                    //legacy
                    if (data.errors["serverValidationMessage"] != null) {
                      vm.form.serverValidationMessage = data.errors["serverValidationMessage"];
                    }

                    vm.form.submitValidationError = true;
                    observer.setErrors(data.errors);
                    return;
                  } // if the server sends a redirect, reload the window


                  if (data.redirect) {
                    window.location.href = data.redirect;
                    return;
                  }

                  vm.form.submitSuccess = true;
                  vm.form.successMessage = data.successMessage;
                  return;
                },
                error: function error(xhr, statusText) {
                  vm.form = _objectSpread({}, defaultFormData);
                  vm.form.submitError = true;
                  vm.form.serverErrorMessage = "".concat(xhr.status, " ").concat(statusText);
                }
              });
            }
          });
          return false;
        }
      })
    }));
  }); // run the vue-form init script provided in the OC admin ui

  var initScript = app.dataset.initScript;

  if (initScript) {
    var initFn = new Function(decodeUnicode(initScript));
    initFn();
  }
} // look for all vue forms when this script is loaded and initialize them


document.querySelectorAll(".vue-form").forEach(initForm);
document.addEventListener("DOMContentLoaded", function (event) {
  document.querySelectorAll(".vue-app-instance").forEach(function (elem) {
    new Vue({
      el: elem
    });
  });
  document.querySelectorAll(".vuetify-app-instance").forEach(function (elem) {
    new Vue({
      el: elem,
      vuetify: new Vuetify()
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9iamVjdFRvRm9ybURhdGEuanMiLCJ2ZWV2YWxpZGF0ZS1zZXR1cC5qcyIsInZ1ZS1mb3Jtcy5qcyJdLCJuYW1lcyI6WyJpc1VuZGVmaW5lZCIsInZhbHVlIiwidW5kZWZpbmVkIiwiaXNOdWxsIiwiaXNCb29sZWFuIiwiaXNPYmplY3QiLCJPYmplY3QiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0RhdGUiLCJEYXRlIiwiaXNCbG9iIiwic2l6ZSIsInR5cGUiLCJzbGljZSIsImlzRmlsZSIsIm5hbWUiLCJsYXN0TW9kaWZpZWREYXRlIiwibGFzdE1vZGlmaWVkIiwic2VyaWFsaXplIiwib2JqIiwiY2ZnIiwiZmQiLCJwcmUiLCJpbmRpY2VzIiwibnVsbHNBc1VuZGVmaW5lZHMiLCJib29sZWFuc0FzSW50ZWdlcnMiLCJhbGxvd0VtcHR5QXJyYXlzIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJsZW5ndGgiLCJmb3JFYWNoIiwiaW5kZXgiLCJrZXkiLCJ0b0lTT1N0cmluZyIsImtleXMiLCJwcm9wIiwibGFzdEluZGV4T2YiLCJzdWJzdHJpbmciLCJ3aW5kb3ciLCJzZXJpYWxpemVUb0Zvcm1EYXRhIiwiVnVlIiwiY29tcG9uZW50IiwiVmVlVmFsaWRhdGUiLCJWYWxpZGF0aW9uUHJvdmlkZXIiLCJWYWxpZGF0aW9uT2JzZXJ2ZXIiLCJsb2NhbGl6ZSIsImVuIiwiZnIiLCJkZWNvZGVVbmljb2RlIiwic3RyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXRvYiIsInNwbGl0IiwibWFwIiwiYyIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsImpvaW4iLCJpbml0Rm9ybSIsImFwcCIsImRhdGFzZXQiLCJsYW5nIiwiY29tcG9uZW50T3B0aW9ucyIsIm9wdGlvbnMiLCJwYXJzZWRPcHRpb25zIiwiZm4iLCJGdW5jdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJwYXJzZWREYXRhIiwiZGF0YSIsInBhcnNlZE1ldGhvZHMiLCJtZXRob2RzIiwicGFyc2VkUmVzdCIsIm9iakRhdGEiLCJkZWZhdWx0Rm9ybURhdGEiLCJzdWJtaXR0aW5nIiwic3VibWl0U3VjY2VzcyIsInN1Y2Nlc3NNZXNzYWdlIiwic3VibWl0RXJyb3IiLCJzdWJtaXRWYWxpZGF0aW9uRXJyb3JzIiwic2VydmVyVmFsaWRhdGlvbk1lc3NhZ2UiLCJzZXJ2ZXJFcnJvck1lc3NhZ2UiLCJyZXNwb25zZURhdGEiLCJyZXNvbHZlIiwidGVtcGxhdGUiLCJmb3JtIiwic3VibWl0RGF0YSIsIiRkYXRhIiwiZm9ybVJlc2V0IiwiJHJlZnMiLCJvYnMiLCJyZXNldCIsImZvcm1IYW5kbGVTdWJtaXQiLCJlIiwicHJldmVudERlZmF1bHQiLCJ2bSIsIm9ic2VydmVyIiwidmFsaWRhdGUiLCJ0aGVuIiwidmFsaWQiLCJhY3Rpb24iLCJnZXRBdHRyaWJ1dGUiLCJmcm1EYXRhIiwiX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4iLCJxdWVyeVNlbGVjdG9yIiwiZ3JlY2FwdGNoYSIsInJlY2FwdGNoYSIsImdldFJlc3BvbnNlIiwiZm9ybURhdGEiLCIkIiwiZmluZCIsImVhY2giLCJmaWxlcyIsImZpbGUiLCJhamF4IiwidXJsIiwiY2FjaGUiLCJkYXRhVHlwZSIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJzdWNjZXNzIiwidmFsaWRhdGlvbkVycm9yIiwiZXJyb3JzIiwic3VibWl0VmFsaWRhdGlvbkVycm9yIiwic2V0RXJyb3JzIiwicmVkaXJlY3QiLCJsb2NhdGlvbiIsImhyZWYiLCJlcnJvciIsInhociIsInN0YXR1c1RleHQiLCJzdGF0dXMiLCJpbml0U2NyaXB0IiwiaW5pdEZuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZWxlbSIsImVsIiwidnVldGlmeSIsIlZ1ZXRpZnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxDQUFDLFlBQVk7QUFDWCxNQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxLQUFEO0FBQUEsV0FBV0EsS0FBSyxLQUFL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RSxJQUFJQyxPQUFKO0FBRkgsS0FBUjtBQUlELEdBTEQ7QUFPRCxDQWZEIiwiZmlsZSI6InZ1ZS1mb3Jtcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGlzVW5kZWZpbmVkID0gKHZhbHVlKSA9PiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0IGlzTnVsbCA9ICh2YWx1ZSkgPT4gdmFsdWUgPT09IG51bGw7XG5cbiAgY29uc3QgaXNCb29sZWFuID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcblxuICBjb25zdCBpc09iamVjdCA9ICh2YWx1ZSkgPT4gdmFsdWUgPT09IE9iamVjdCh2YWx1ZSk7XG5cbiAgY29uc3QgaXNBcnJheSA9ICh2YWx1ZSkgPT4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG5cbiAgY29uc3QgaXNEYXRlID0gKHZhbHVlKSA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGU7XG5cbiAgY29uc3QgaXNCbG9iID0gKHZhbHVlKSA9PlxuICAgIHZhbHVlICYmXG4gICAgdHlwZW9mIHZhbHVlLnNpemUgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnICYmXG4gICAgdHlwZW9mIHZhbHVlLnNsaWNlID09PSAnZnVuY3Rpb24nO1xuXG4gIGNvbnN0IGlzRmlsZSA9ICh2YWx1ZSkgPT5cbiAgICBpc0Jsb2IodmFsdWUpICYmXG4gICAgdHlwZW9mIHZhbHVlLm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgKHR5cGVvZiB2YWx1ZS5sYXN0TW9kaWZpZWREYXRlID09PSAnb2JqZWN0JyB8fFxuICAgICAgdHlwZW9mIHZhbHVlLmxhc3RNb2RpZmllZCA9PT0gJ251bWJlcicpO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZSA9IChvYmosIGNmZywgZmQsIHByZSkgPT4ge1xuICAgIGNmZyA9IGNmZyB8fCB7fTtcblxuICAgIGNmZy5pbmRpY2VzID0gaXNVbmRlZmluZWQoY2ZnLmluZGljZXMpID8gZmFsc2UgOiBjZmcuaW5kaWNlcztcblxuICAgIGNmZy5udWxsc0FzVW5kZWZpbmVkcyA9IGlzVW5kZWZpbmVkKGNmZy5udWxsc0FzVW5kZWZpbmVkcylcbiAgICAgID8gZmFsc2VcbiAgICAgIDogY2ZnLm51bGxzQXNVbmRlZmluZWRzO1xuXG4gICAgY2ZnLmJvb2xlYW5zQXNJbnRlZ2VycyA9IGlzVW5kZWZpbmVkKGNmZy5ib29sZWFuc0FzSW50ZWdlcnMpXG4gICAgICA/IGZhbHNlXG4gICAgICA6IGNmZy5ib29sZWFuc0FzSW50ZWdlcnM7XG5cbiAgICBjZmcuYWxsb3dFbXB0eUFycmF5cyA9IGlzVW5kZWZpbmVkKGNmZy5hbGxvd0VtcHR5QXJyYXlzKVxuICAgICAgPyBmYWxzZVxuICAgICAgOiBjZmcuYWxsb3dFbXB0eUFycmF5cztcblxuICAgIGZkID0gZmQgfHwgbmV3IEZvcm1EYXRhKCk7XG5cbiAgICBpZiAoaXNVbmRlZmluZWQob2JqKSkge1xuICAgICAgcmV0dXJuIGZkO1xuICAgIH0gZWxzZSBpZiAoaXNOdWxsKG9iaikpIHtcbiAgICAgIGlmICghY2ZnLm51bGxzQXNVbmRlZmluZWRzKSB7XG4gICAgICAgIGZkLmFwcGVuZChwcmUsICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbihvYmopKSB7XG4gICAgICBpZiAoY2ZnLmJvb2xlYW5zQXNJbnRlZ2Vycykge1xuICAgICAgICBmZC5hcHBlbmQocHJlLCBvYmogPyAxIDogMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZC5hcHBlbmQocHJlLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICBpZiAob2JqLmxlbmd0aCkge1xuICAgICAgICBvYmouZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gcHJlICsgJ1snICsgKGNmZy5pbmRpY2VzID8gaW5kZXggOiAnJykgKyAnXSc7XG5cbiAgICAgICAgICBzZXJpYWxpemUodmFsdWUsIGNmZywgZmQsIGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChjZmcuYWxsb3dFbXB0eUFycmF5cykge1xuICAgICAgICBmZC5hcHBlbmQocHJlICsgJ1tdJywgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEYXRlKG9iaikpIHtcbiAgICAgIGZkLmFwcGVuZChwcmUsIG9iai50b0lTT1N0cmluZygpKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9iaikgJiYgIWlzRmlsZShvYmopICYmICFpc0Jsb2Iob2JqKSkge1xuICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW3Byb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHdoaWxlIChwcm9wLmxlbmd0aCA+IDIgJiYgcHJvcC5sYXN0SW5kZXhPZignW10nKSA9PT0gcHJvcC5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgICBwcm9wID0gcHJvcC5zdWJzdHJpbmcoMCwgcHJvcC5sZW5ndGggLSAyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBrZXkgPSBwcmUgPyBwcmUgKyAnWycgKyBwcm9wICsgJ10nIDogcHJvcDtcblxuICAgICAgICBzZXJpYWxpemUodmFsdWUsIGNmZywgZmQsIGtleSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmQuYXBwZW5kKHByZSwgb2JqKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmQ7XG4gIH07XG4gIHdpbmRvdy5zZXJpYWxpemVUb0Zvcm1EYXRhID0gc2VyaWFsaXplO1xufSkoKTtcbiIsIlxyXG4vLyByZWdpc3RlciBWZWVWYWxpZGF0ZSBjb21wb25lbnRzIGdsb2JhbGx5XHJcblZ1ZS5jb21wb25lbnQoJ3ZhbGlkYXRpb24tcHJvdmlkZXInLCBWZWVWYWxpZGF0ZS5WYWxpZGF0aW9uUHJvdmlkZXIpO1xyXG5WdWUuY29tcG9uZW50KCd2YWxpZGF0aW9uLW9ic2VydmVyJywgVmVlVmFsaWRhdGUuVmFsaWRhdGlvbk9ic2VydmVyKTsgXHJcblxyXG4vLyBpbmNsdWRlIGRlZmF1bHQgZW5nbGlzaCBhbmQgZnJlbmNoIHRyYW5zbGF0aW9ucy5cclxuVmVlVmFsaWRhdGUubG9jYWxpemUoe1xyXG4gIGVuOntcclxuICAgIFwiY29kZVwiOiBcImVuXCIsXHJcbiAgICBcIm1lc3NhZ2VzXCI6IHtcclxuICAgICAgXCJhbHBoYVwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbWF5IG9ubHkgY29udGFpbiBhbHBoYWJldGljIGNoYXJhY3RlcnNcIixcclxuICAgICAgXCJhbHBoYV9udW1cIjogXCJUaGUge19maWVsZF99IGZpZWxkIG1heSBvbmx5IGNvbnRhaW4gYWxwaGEtbnVtZXJpYyBjaGFyYWN0ZXJzXCIsXHJcbiAgICAgIFwiYWxwaGFfZGFzaFwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbWF5IGNvbnRhaW4gYWxwaGEtbnVtZXJpYyBjaGFyYWN0ZXJzIGFzIHdlbGwgYXMgZGFzaGVzIGFuZCB1bmRlcnNjb3Jlc1wiLFxyXG4gICAgICBcImFscGhhX3NwYWNlc1wiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbWF5IG9ubHkgY29udGFpbiBhbHBoYWJldGljIGNoYXJhY3RlcnMgYXMgd2VsbCBhcyBzcGFjZXNcIixcclxuICAgICAgXCJiZXR3ZWVuXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBtdXN0IGJlIGJldHdlZW4ge21pbn0gYW5kIHttYXh9XCIsXHJcbiAgICAgIFwiY29uZmlybWVkXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBjb25maXJtYXRpb24gZG9lcyBub3QgbWF0Y2hcIixcclxuICAgICAgXCJkaWdpdHNcIjogXCJUaGUge19maWVsZF99IGZpZWxkIG11c3QgYmUgbnVtZXJpYyBhbmQgZXhhY3RseSBjb250YWluIHtsZW5ndGh9IGRpZ2l0c1wiLFxyXG4gICAgICBcImRpbWVuc2lvbnNcIjogXCJUaGUge19maWVsZF99IGZpZWxkIG11c3QgYmUge3dpZHRofSBwaXhlbHMgYnkge2hlaWdodH0gcGl4ZWxzXCIsXHJcbiAgICAgIFwiZW1haWxcIjogXCJUaGUge19maWVsZF99IGZpZWxkIG11c3QgYmUgYSB2YWxpZCBlbWFpbFwiLFxyXG4gICAgICBcImV4Y2x1ZGVkXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBpcyBub3QgYSB2YWxpZCB2YWx1ZVwiLFxyXG4gICAgICBcImV4dFwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgaXMgbm90IGEgdmFsaWQgZmlsZVwiLFxyXG4gICAgICBcImltYWdlXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBtdXN0IGJlIGFuIGltYWdlXCIsXHJcbiAgICAgIFwiaW50ZWdlclwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbXVzdCBiZSBhbiBpbnRlZ2VyXCIsXHJcbiAgICAgIFwibGVuZ3RoXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBtdXN0IGJlIHtsZW5ndGh9IGxvbmdcIixcclxuICAgICAgXCJtYXhfdmFsdWVcIjogXCJUaGUge19maWVsZF99IGZpZWxkIG11c3QgYmUge21heH0gb3IgbGVzc1wiLFxyXG4gICAgICBcIm1heFwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbWF5IG5vdCBiZSBncmVhdGVyIHRoYW4ge2xlbmd0aH0gY2hhcmFjdGVyc1wiLFxyXG4gICAgICBcIm1pbWVzXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBtdXN0IGhhdmUgYSB2YWxpZCBmaWxlIHR5cGVcIixcclxuICAgICAgXCJtaW5fdmFsdWVcIjogXCJUaGUge19maWVsZF99IGZpZWxkIG11c3QgYmUge21pbn0gb3IgbW9yZVwiLFxyXG4gICAgICBcIm1pblwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbXVzdCBiZSBhdCBsZWFzdCB7bGVuZ3RofSBjaGFyYWN0ZXJzXCIsXHJcbiAgICAgIFwibnVtZXJpY1wiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgbWF5IG9ubHkgY29udGFpbiBudW1lcmljIGNoYXJhY3RlcnNcIixcclxuICAgICAgXCJvbmVPZlwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgaXMgbm90IGEgdmFsaWQgdmFsdWVcIixcclxuICAgICAgXCJyZWdleFwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgZm9ybWF0IGlzIGludmFsaWRcIixcclxuICAgICAgXCJyZXF1aXJlZF9pZlwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgaXMgcmVxdWlyZWRcIixcclxuICAgICAgXCJyZXF1aXJlZFwiOiBcIlRoZSB7X2ZpZWxkX30gZmllbGQgaXMgcmVxdWlyZWRcIixcclxuICAgICAgXCJzaXplXCI6IFwiVGhlIHtfZmllbGRffSBmaWVsZCBzaXplIG11c3QgYmUgbGVzcyB0aGFuIHtzaXplfUtCXCJcclxuICAgIH1cclxuICB9LFxyXG4gIGZyOiB7XHJcbiAgICBcImNvZGVcIjogXCJmclwiLFxyXG4gICAgXCJtZXNzYWdlc1wiOiB7XHJcbiAgICAgIFwiYWxwaGFcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gbmUgcGV1dCBjb250ZW5pciBxdWUgZGVzIGxldHRyZXNcIixcclxuICAgICAgXCJhbHBoYV9udW1cIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gbmUgcGV1dCBjb250ZW5pciBxdWUgZGVzIGNhcmFjdMOocmVzIGFscGhhLW51bcOpcmlxdWVzXCIsXHJcbiAgICAgIFwiYWxwaGFfZGFzaFwiOiBcIkxlIGNoYW1wIHtfZmllbGRffSBuZSBwZXV0IGNvbnRlbmlyIHF1ZSBkZXMgY2FyYWN0w6hyZXMgYWxwaGEtbnVtw6lyaXF1ZXMsIHRpcmV0cyBvdSBzb3VsaWduw6lzXCIsXHJcbiAgICAgIFwiYWxwaGFfc3BhY2VzXCI6IFwiTGUgY2hhbXAge19maWVsZF99IG5lIHBldXQgY29udGVuaXIgcXVlIGRlcyBsZXR0cmVzIG91IGRlcyBlc3BhY2VzXCIsXHJcbiAgICAgIFwiYmV0d2VlblwiOiBcIkxlIGNoYW1wIHtfZmllbGRffSBkb2l0IMOqdHJlIGNvbXByaXMgZW50cmUge21pbn0gZXQge21heH1cIixcclxuICAgICAgXCJjb25maXJtZWRcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gbmUgY29ycmVzcG9uZCBwYXNcIixcclxuICAgICAgXCJkaWdpdHNcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gZG9pdCDDqnRyZSB1biBub21icmUgZW50aWVyIGRlIHtsZW5ndGh9IGNoaWZmcmVzXCIsXHJcbiAgICAgIFwiZGltZW5zaW9uc1wiOiBcIkxlIGNoYW1wIHtfZmllbGRffSBkb2l0IGF2b2lyIHVuZSB0YWlsbGUgZGUge3dpZHRofSBwaXhlbHMgcGFyIHtoZWlnaHR9IHBpeGVsc1wiLFxyXG4gICAgICBcImVtYWlsXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGRvaXQgw6p0cmUgdW5lIGFkcmVzc2UgZS1tYWlsIHZhbGlkZVwiLFxyXG4gICAgICBcImV4Y2x1ZGVkXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGRvaXQgw6p0cmUgdW5lIHZhbGV1ciB2YWxpZGVcIixcclxuICAgICAgXCJleHRcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gZG9pdCDDqnRyZSB1biBmaWNoaWVyIHZhbGlkZVwiLFxyXG4gICAgICBcImltYWdlXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGRvaXQgw6p0cmUgdW5lIGltYWdlXCIsXHJcbiAgICAgIFwiaW50ZWdlclwiOiBcIkxlIGNoYW1wIHtfZmllbGRffSBkb2l0IMOqdHJlIHVuIGVudGllclwiLFxyXG4gICAgICBcImxlbmd0aFwiOiBcIkxlIGNoYW1wIHtfZmllbGRffSBkb2l0IGNvbnRlbmlyIHtsZW5ndGh9IGNhcmFjdMOocmVzXCIsXHJcbiAgICAgIFwibWF4X3ZhbHVlXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGRvaXQgYXZvaXIgdW5lIHZhbGV1ciBkZSB7bWF4fSBvdSBtb2luc1wiLFxyXG4gICAgICBcIm1heFwiOiBcIkxlIGNoYW1wIHtfZmllbGRffSBuZSBwZXV0IHBhcyBjb250ZW5pciBwbHVzIGRlIHtsZW5ndGh9IGNhcmFjdMOocmVzXCIsXHJcbiAgICAgIFwibWltZXNcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gZG9pdCBhdm9pciB1biB0eXBlIE1JTUUgdmFsaWRlXCIsXHJcbiAgICAgIFwibWluX3ZhbHVlXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGRvaXQgYXZvaXIgdW5lIHZhbGV1ciBkZSB7bWlufSBvdSBwbHVzXCIsXHJcbiAgICAgIFwibWluXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGRvaXQgY29udGVuaXIgYXUgbWluaW11bSB7bGVuZ3RofSBjYXJhY3TDqHJlc1wiLFxyXG4gICAgICBcIm51bWVyaWNcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gbmUgcGV1dCBjb250ZW5pciBxdWUgZGVzIGNoaWZmcmVzXCIsXHJcbiAgICAgIFwib25lT2ZcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gZG9pdCDDqnRyZSB1bmUgdmFsZXVyIHZhbGlkZVwiLFxyXG4gICAgICBcInJlZ2V4XCI6IFwiTGUgY2hhbXAge19maWVsZF99IGVzdCBpbnZhbGlkZVwiLFxyXG4gICAgICBcInJlcXVpcmVkXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGVzdCBvYmxpZ2F0b2lyZVwiLFxyXG4gICAgICBcInJlcXVpcmVkX2lmXCI6IFwiTGUgY2hhbXAge19maWVsZF99IGVzdCBvYmxpZ2F0b2lyZSBsb3JzcXVlIHt0YXJnZXR9IHBvc3PDqGRlIGNldHRlIHZhbGV1clwiLFxyXG4gICAgICBcInNpemVcIjogXCJMZSBjaGFtcCB7X2ZpZWxkX30gZG9pdCBhdm9pciB1biBwb2lkcyBpbmbDqXJpZXVyIMOgIHtzaXplfUtCXCJcclxuICAgIH1cclxuICB9LFxyXG59KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGRlY29kZVVuaWNvZGUoc3RyKSB7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoXG4gICAgYXRvYihzdHIpXG4gICAgICAuc3BsaXQoXCJcIilcbiAgICAgIC5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIFwiJVwiICsgKFwiMDBcIiArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlwiKVxuICApO1xufVxuXG4vLyBydW4gaW5pdCBzY3JpcHRcbmZ1bmN0aW9uIGluaXRGb3JtKGFwcCkge1xuICAvLyBTZXQgVmVlVmFsaWRhdGUgbGFuZ3VhZ2UgYmFzZWQgb24gdGhlIGxhbmcgcGFyYW1ldGVyXG4gIFZlZVZhbGlkYXRlLmxvY2FsaXplKGFwcC5kYXRhc2V0LmxhbmcpO1xuXG4gIGxldCBjb21wb25lbnRPcHRpb25zID0gYXBwLmRhdGFzZXQub3B0aW9ucztcblxuICBsZXQgcGFyc2VkT3B0aW9ucyA9IHt9O1xuICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgIGNvbnN0IGZuID0gbmV3IEZ1bmN0aW9uKGByZXR1cm4gKCR7ZGVjb2RlVW5pY29kZShjb21wb25lbnRPcHRpb25zKX0pO2ApO1xuICAgIHBhcnNlZE9wdGlvbnMgPSBmbigpO1xuICAgIGlmICghcGFyc2VkT3B0aW9ucykge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIFwiQ291bGQgbm90IHBhcnNlIHRoZSBjb21wb25lbnRPcHRpb25zIG9iamVjdC4gTWFrZSBzdXJlIHlvdXIgb2JqZWN0IGlzIHdlbGwgZm9ybWVkLlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBkYXRhOiBwYXJzZWREYXRhLFxuICAgIG1ldGhvZHM6IHBhcnNlZE1ldGhvZHMsXG4gICAgLi4ucGFyc2VkUmVzdFxuICB9ID0gcGFyc2VkT3B0aW9ucztcbiAgbGV0IG9iakRhdGEgPSBwYXJzZWREYXRhO1xuICBpZiAodHlwZW9mIHBhcnNlZERhdGEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIG9iakRhdGEgPSBwYXJzZWREYXRhKCk7XG4gIH1cbiAgY29uc3QgZGVmYXVsdEZvcm1EYXRhID0ge1xuICAgIHN1Ym1pdHRpbmc6IGZhbHNlLFxuICAgIHN1Ym1pdFN1Y2Nlc3M6IGZhbHNlLFxuICAgIHN1Y2Nlc3NNZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgc3VibWl0RXJyb3I6IGZhbHNlLFxuICAgIHN1Ym1pdFZhbGlkYXRpb25FcnJvcnM6IGZhbHNlLFxuICAgIHNlcnZlclZhbGlkYXRpb25NZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgc2VydmVyRXJyb3JNZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgcmVzcG9uc2VEYXRhOiB1bmRlZmluZWQsXG4gIH07XG5cbiAgVnVlLmNvbXBvbmVudChhcHAuZGF0YXNldC5uYW1lLCBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHJlc29sdmUoe1xuICAgICAgLy8gRmlyc3QgYmVjYXVzZSB0aGUgZWxlbWVudHMgYmVsb3cgd2lsbCBvdmVycmlkZVxuICAgICAgLi4ucGFyc2VkUmVzdCxcbiAgICAgIHRlbXBsYXRlOiBgIyR7YXBwLmRhdGFzZXQubmFtZX1gLFxuICAgICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm9iakRhdGEsXG4gICAgICAgICAgZm9ybTogeyAuLi5kZWZhdWx0Rm9ybURhdGEgfSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBtZXRob2RzOiB7XG4gICAgICAgIC8vIGRlZmF1bHQgbWV0aG9kIHRoYXQgcmV0dXJuIHRoZSBkYXRhIHRvIGJlIHN1Ym1pdHRlZCB0byB0aGUgc2VydmVyXG4gICAgICAgIC8vIHRoaXMgd2FzIGFkZGVkIGZpcnN0IHRvIGFsbG93IHRoZSBBZG1pbmlzdHJhdG9yIHRvIGVkaXQgdGhpcyBmdW5jdGlvbiBvbiB0aGUgT0MgQWRtaW5cbiAgICAgICAgc3VibWl0RGF0YSgpIHtcbiAgICAgICAgICByZXR1cm4geyAuLi50aGlzLiRkYXRhIH07XG4gICAgICAgIH0sXG4gICAgICAgIC4uLnBhcnNlZE1ldGhvZHMsXG4gICAgICAgIGZvcm1SZXNldCgpIHtcbiAgICAgICAgICB0aGlzLmZvcm0gPSB7IC4uLmRlZmF1bHRGb3JtRGF0YSB9O1xuICAgICAgICAgIC8vIGFsc28gcmVzZXQgdGhlIFZlZVZhbGlkYXRlIG9ic2VydmVyXG4gICAgICAgICAgdGhpcy4kcmVmcy5vYnMucmVzZXQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybUhhbmRsZVN1Ym1pdChlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNvbnN0IHZtID0gdGhpcztcbiAgICAgICAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBWZWVWYWxpZGF0ZSBvYnNlcnZlclxuICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gdm0uJHJlZnMub2JzO1xuICAgICAgICAgIG9ic2VydmVyLnZhbGlkYXRlKCkudGhlbigodmFsaWQpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB2bS4kcmVmcy5mb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBzZXQgZm9ybSB2dWUgZGF0YVxuICAgICAgICAgICAgICB2bS5mb3JtLnN1Ym1pdHRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgIGxldCBmcm1EYXRhID0gdm0uc3VibWl0RGF0YSgpO1xuICAgICAgICAgICAgICBmcm1EYXRhLl9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuID0gdm0uJHJlZnMuZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICdpbnB1dFtuYW1lPVwiX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW5cIl0nXG4gICAgICAgICAgICAgICkudmFsdWU7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JlY2FwdGNoYSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgZnJtRGF0YS5yZWNhcHRjaGEgPSBncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBsZXQgZm9ybURhdGEgPSB3aW5kb3cuc2VyaWFsaXplVG9Gb3JtRGF0YShmcm1EYXRhKTtcblxuICAgICAgICAgICAgICAvLyBpdGVyYXRlIGFsbCBmaWxlIGlucHV0cyBhbmQgYWRkIHRoZSBmaWxlcyB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgICAgICAkKHRoaXMuJHJlZnMuZm9ybSkuZmluZChcImlucHV0W3R5cGU9ZmlsZV1cIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiB0aGlzLmZpbGVzKSB7XG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoZmlsZS5uYW1lLCBmaWxlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICB1cmw6IGFjdGlvbixcbiAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLCAvLyBleHBlY3QganNvbiBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsIC8vdGVsbCBqcXVlcnkgbm90IHRvIHByb2Nlc3MgZGF0YVxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSwgLy90ZWxsIGpxdWVyeSBub3QgdG8gc2V0IGNvbnRlbnQtdHlwZVxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICB2bS5mb3JtID0geyAuLi5kZWZhdWx0Rm9ybURhdGEgfTtcbiAgICAgICAgICAgICAgICAgIHZtLmZvcm0ucmVzcG9uc2VEYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSB2YWxpZGF0aW9uIGVycm9ycyBvbiB0aGUgZm9ybSwgZGlzcGxheSB0aGVtLlxuICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbGVnYWN5XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycm9yc1tcInNlcnZlclZhbGlkYXRpb25NZXNzYWdlXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2bS5mb3JtLnNlcnZlclZhbGlkYXRpb25NZXNzYWdlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXJyb3JzW1wic2VydmVyVmFsaWRhdGlvbk1lc3NhZ2VcIl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdm0uZm9ybS5zdWJtaXRWYWxpZGF0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5zZXRFcnJvcnMoZGF0YS5lcnJvcnMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzZXJ2ZXIgc2VuZHMgYSByZWRpcmVjdCwgcmVsb2FkIHRoZSB3aW5kb3dcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGF0YS5yZWRpcmVjdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB2bS5mb3JtLnN1Ym1pdFN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgdm0uZm9ybS5zdWNjZXNzTWVzc2FnZSA9IGRhdGEuc3VjY2Vzc01lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgdm0uZm9ybSA9IHsgLi4uZGVmYXVsdEZvcm1EYXRhIH07XG4gICAgICAgICAgICAgICAgICB2bS5mb3JtLnN1Ym1pdEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHZtLmZvcm0uc2VydmVyRXJyb3JNZXNzYWdlID0gYCR7eGhyLnN0YXR1c30gJHtzdGF0dXNUZXh0fWA7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcnVuIHRoZSB2dWUtZm9ybSBpbml0IHNjcmlwdCBwcm92aWRlZCBpbiB0aGUgT0MgYWRtaW4gdWlcbiAgbGV0IGluaXRTY3JpcHQgPSBhcHAuZGF0YXNldC5pbml0U2NyaXB0O1xuICBpZiAoaW5pdFNjcmlwdCkge1xuICAgIGNvbnN0IGluaXRGbiA9IG5ldyBGdW5jdGlvbihkZWNvZGVVbmljb2RlKGluaXRTY3JpcHQpKTtcbiAgICBpbml0Rm4oKTtcbiAgfVxufVxuXG4vLyBsb29rIGZvciBhbGwgdnVlIGZvcm1zIHdoZW4gdGhpcyBzY3JpcHQgaXMgbG9hZGVkIGFuZCBpbml0aWFsaXplIHRoZW1cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudnVlLWZvcm1cIikuZm9yRWFjaChpbml0Rm9ybSk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudnVlLWFwcC1pbnN0YW5jZVwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgbmV3IFZ1ZSh7XG4gICAgICBlbDogZWxlbSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi52dWV0aWZ5LWFwcC1pbnN0YW5jZVwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgbmV3IFZ1ZSh7XG4gICAgICBlbDogZWxlbSxcbiAgICAgIHZ1ZXRpZnk6IG5ldyBWdWV0aWZ5KCksXG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdfQ==
