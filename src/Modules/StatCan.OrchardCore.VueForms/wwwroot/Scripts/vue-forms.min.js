"use strict";function ownKeys(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(i),!0).forEach((function(t){_defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function _defineProperty(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function _objectWithoutProperties(e,t){if(null==e)return{};var i,r,a=_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)i=n[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}function _objectWithoutPropertiesLoose(e,t){if(null==e)return{};var i,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)i=n[r],t.indexOf(i)>=0||(a[i]=e[i]);return a}function initForm(e){VeeValidate.localize(e.dataset.lang);var t=e.dataset.initScript;t&&new Function(atob(t))();var i=e.dataset.script,r={};i&&(r=new Function("return ".concat(atob(i),";"))());var a=r,n=a.data,o=a.methods,s=_objectWithoutProperties(a,["data","methods"]),d=n;"function"==typeof n&&(d=n());var l={submitting:!1,submitSuccess:!1,successMessage:void 0,submitError:!1,errorMessage:void 0};Vue.component(e.dataset.name,_objectSpread(_objectSpread({},s),{},{template:"#".concat(e.dataset.name),data:function(){return _objectSpread(_objectSpread({},d),{},{form:_objectSpread({},l)})},methods:_objectSpread(_objectSpread({},o),{},{formReset:function(){Object.assign(this.$data.form,_objectSpread({},l)),this.$refs.obs.reset()},formHandleSubmit:function(e){console.log("test"),e.preventDefault();var t=this,i=t.$refs.obs;return i.validate().then((function(e){if(e){var r=t.$refs.form.getAttribute("action"),a=$("input[name='__RequestVerificationToken']").val();t.form.submitting=!0,$.ajax({type:"POST",url:r,data:_objectSpread(_objectSpread({},t.$data),{},{__RequestVerificationToken:a}),cache:!1,dataType:"json",success:function(e){if(Object.assign(t.$data.form,_objectSpread({},l)),e.validationError)return t.form.submitError=!0,t.form.errorMessage=e.errorMessage,void i.setErrors(e.errors);if(e.redirect)window.location.href=e.redirect;else{if(e.success)return t.form.submitSuccess=!0,void(t.form.successMessage=e.successMessage);t.form.submitError=!0,t.form.errorMessage="Something wen't wrong. Please report this to your site administrators. Error code: `VueForms.AjaxHandler`"}},error:function(e,i){Object.assign(t.$data.form,_objectSpread({},l)),t.form.submitError=!0,t.form.errorMessage="".concat(e.status," ").concat(i)}})}})),!1}})})),new Vue({el:e,vuetify:new Vuetify})}Vue.component("validation-provider",VeeValidate.ValidationProvider),Vue.component("validation-observer",VeeValidate.ValidationObserver),VeeValidate.localize({en:{code:"en",messages:{alpha:"The {_field_} field may only contain alphabetic characters",alpha_num:"The {_field_} field may only contain alpha-numeric characters",alpha_dash:"The {_field_} field may contain alpha-numeric characters as well as dashes and underscores",alpha_spaces:"The {_field_} field may only contain alphabetic characters as well as spaces",between:"The {_field_} field must be between {min} and {max}",confirmed:"The {_field_} field confirmation does not match",digits:"The {_field_} field must be numeric and exactly contain {length} digits",dimensions:"The {_field_} field must be {width} pixels by {height} pixels",email:"The {_field_} field must be a valid email",excluded:"The {_field_} field is not a valid value",ext:"The {_field_} field is not a valid file",image:"The {_field_} field must be an image",integer:"The {_field_} field must be an integer",length:"The {_field_} field must be {length} long",max_value:"The {_field_} field must be {max} or less",max:"The {_field_} field may not be greater than {length} characters",mimes:"The {_field_} field must have a valid file type",min_value:"The {_field_} field must be {min} or more",min:"The {_field_} field must be at least {length} characters",numeric:"The {_field_} field may only contain numeric characters",oneOf:"The {_field_} field is not a valid value",regex:"The {_field_} field format is invalid",required_if:"The {_field_} field is required",required:"The {_field_} field is required",size:"The {_field_} field size must be less than {size}KB"}},fr:{code:"fr",messages:{alpha:"Le champ {_field_} ne peut contenir que des lettres",alpha_num:"Le champ {_field_} ne peut contenir que des caractères alpha-numériques",alpha_dash:"Le champ {_field_} ne peut contenir que des caractères alpha-numériques, tirets ou soulignés",alpha_spaces:"Le champ {_field_} ne peut contenir que des lettres ou des espaces",between:"Le champ {_field_} doit être compris entre {min} et {max}",confirmed:"Le champ {_field_} ne correspond pas",digits:"Le champ {_field_} doit être un nombre entier de {length} chiffres",dimensions:"Le champ {_field_} doit avoir une taille de {width} pixels par {height} pixels",email:"Le champ {_field_} doit être une adresse e-mail valide",excluded:"Le champ {_field_} doit être une valeur valide",ext:"Le champ {_field_} doit être un fichier valide",image:"Le champ {_field_} doit être une image",integer:"Le champ {_field_} doit être un entier",length:"Le champ {_field_} doit contenir {length} caractères",max_value:"Le champ {_field_} doit avoir une valeur de {max} ou moins",max:"Le champ {_field_} ne peut pas contenir plus de {length} caractères",mimes:"Le champ {_field_} doit avoir un type MIME valide",min_value:"Le champ {_field_} doit avoir une valeur de {min} ou plus",min:"Le champ {_field_} doit contenir au minimum {length} caractères",numeric:"Le champ {_field_} ne peut contenir que des chiffres",oneOf:"Le champ {_field_} doit être une valeur valide",regex:"Le champ {_field_} est invalide",required:"Le champ {_field_} est obligatoire",required_if:"Le champ {_field_} est obligatoire lorsque {target} possède cette valeur",size:"Le champ {_field_} doit avoir un poids inférieur à {size}KB"}}}),document.addEventListener("DOMContentLoaded",(function(e){document.querySelectorAll(".vue-form").forEach(initForm)}));
