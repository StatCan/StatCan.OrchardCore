function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var i=0,a=function(){};return{s:a,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){l=!0,n=e},f:function(){try{o||null==r.return||r.return()}finally{if(l)throw n}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach((function(t){_defineProperty(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _objectWithoutProperties(e,t){if(null==e)return{};var r,i,a=_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function _objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(a[r]=e[r]);return a}function decodeUnicode(e){return decodeURIComponent(atob(e).split("").map((function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join(""))}function initForm(e){VeeValidate.localize(e.dataset.lang);var t=e.dataset.options,r={};t&&((r=new Function("return (".concat(decodeUnicode(t),");"))())||console.log("Could not parse the componentOptions object. Make sure your object is well formed."));var i=r,a=i.data,n=i.methods,o=_objectWithoutProperties(i,["data","methods"]),l=a;"function"==typeof a&&(l=a());var c={submitting:!1,submitSuccess:!1,successMessage:void 0,submitError:!1,submitValidationErrors:!1,serverValidationMessage:void 0,serverErrorMessage:void 0,responseData:void 0};Vue.component(e.dataset.name,(function(t){t(_objectSpread(_objectSpread({},o),{},{template:"#".concat(e.dataset.name),data:function(){return _objectSpread(_objectSpread({},l),{},{form:_objectSpread({},c)})},methods:_objectSpread(_objectSpread({submitData:function(){return _objectSpread({},this.$data)}},n),{},{formReset:function(){this.form=_objectSpread({},c),this.$refs.obs.reset()},formHandleSubmit:function(e){var t=this;e.preventDefault();var r=this,i=r.$refs.obs;return i.validate().then((function(e){if(e){var a=r.$refs.form.getAttribute("action");r.form.submitting=!0;var n=new FormData;n.append("__RequestVerificationToken",r.$refs.form.querySelector('input[name="__RequestVerificationToken"]').value),"object"==("undefined"==typeof grecaptcha?"undefined":_typeof(grecaptcha))&&n.append("recaptcha",grecaptcha.getResponse());var o=r.submitData();for(var l in o)n.append(l,o[l]);$(t.$refs.form).find("input[type=file]").each((function(){var e,t=_createForOfIteratorHelper(this.files);try{for(t.s();!(e=t.n()).done;){var r=e.value;n.append(r.name,r)}}catch(e){t.e(e)}finally{t.f()}})),$.ajax({type:"POST",url:a,data:n,cache:!1,dataType:"json",processData:!1,contentType:!1,success:function(e){if(r.form=_objectSpread({},c),r.form.responseData=e,e.validationError)return null!=e.errors.serverValidationMessage&&(r.form.serverValidationMessage=e.errors.serverValidationMessage),r.form.submitValidationError=!0,void i.setErrors(e.errors);e.redirect?window.location.href=e.redirect:(r.form.submitSuccess=!0,r.form.successMessage=e.successMessage)},error:function(e,t){r.form=_objectSpread({},c),r.form.submitError=!0,r.form.serverErrorMessage="".concat(e.status," ").concat(t)}})}})),!1}})}))}));var s=e.dataset.initScript;s&&new Function(decodeUnicode(s))()}Vue.component("validation-provider",VeeValidate.ValidationProvider),Vue.component("validation-observer",VeeValidate.ValidationObserver),VeeValidate.localize({en:{code:"en",messages:{alpha:"The {_field_} field may only contain alphabetic characters",alpha_num:"The {_field_} field may only contain alpha-numeric characters",alpha_dash:"The {_field_} field may contain alpha-numeric characters as well as dashes and underscores",alpha_spaces:"The {_field_} field may only contain alphabetic characters as well as spaces",between:"The {_field_} field must be between {min} and {max}",confirmed:"The {_field_} field confirmation does not match",digits:"The {_field_} field must be numeric and exactly contain {length} digits",dimensions:"The {_field_} field must be {width} pixels by {height} pixels",email:"The {_field_} field must be a valid email",excluded:"The {_field_} field is not a valid value",ext:"The {_field_} field is not a valid file",image:"The {_field_} field must be an image",integer:"The {_field_} field must be an integer",length:"The {_field_} field must be {length} long",max_value:"The {_field_} field must be {max} or less",max:"The {_field_} field may not be greater than {length} characters",mimes:"The {_field_} field must have a valid file type",min_value:"The {_field_} field must be {min} or more",min:"The {_field_} field must be at least {length} characters",numeric:"The {_field_} field may only contain numeric characters",oneOf:"The {_field_} field is not a valid value",regex:"The {_field_} field format is invalid",required_if:"The {_field_} field is required",required:"The {_field_} field is required",size:"The {_field_} field size must be less than {size}KB"}},fr:{code:"fr",messages:{alpha:"Le champ {_field_} ne peut contenir que des lettres",alpha_num:"Le champ {_field_} ne peut contenir que des caractères alpha-numériques",alpha_dash:"Le champ {_field_} ne peut contenir que des caractères alpha-numériques, tirets ou soulignés",alpha_spaces:"Le champ {_field_} ne peut contenir que des lettres ou des espaces",between:"Le champ {_field_} doit être compris entre {min} et {max}",confirmed:"Le champ {_field_} ne correspond pas",digits:"Le champ {_field_} doit être un nombre entier de {length} chiffres",dimensions:"Le champ {_field_} doit avoir une taille de {width} pixels par {height} pixels",email:"Le champ {_field_} doit être une adresse e-mail valide",excluded:"Le champ {_field_} doit être une valeur valide",ext:"Le champ {_field_} doit être un fichier valide",image:"Le champ {_field_} doit être une image",integer:"Le champ {_field_} doit être un entier",length:"Le champ {_field_} doit contenir {length} caractères",max_value:"Le champ {_field_} doit avoir une valeur de {max} ou moins",max:"Le champ {_field_} ne peut pas contenir plus de {length} caractères",mimes:"Le champ {_field_} doit avoir un type MIME valide",min_value:"Le champ {_field_} doit avoir une valeur de {min} ou plus",min:"Le champ {_field_} doit contenir au minimum {length} caractères",numeric:"Le champ {_field_} ne peut contenir que des chiffres",oneOf:"Le champ {_field_} doit être une valeur valide",regex:"Le champ {_field_} est invalide",required:"Le champ {_field_} est obligatoire",required_if:"Le champ {_field_} est obligatoire lorsque {target} possède cette valeur",size:"Le champ {_field_} doit avoir un poids inférieur à {size}KB"}}}),document.querySelectorAll(".vue-form").forEach(initForm),document.addEventListener("DOMContentLoaded",(function(e){document.querySelectorAll(".vue-app-instance").forEach((function(e){new Vue({el:e})})),document.querySelectorAll(".vuetify-app-instance").forEach((function(e){new Vue({el:e,vuetify:new Vuetify})}))}));
