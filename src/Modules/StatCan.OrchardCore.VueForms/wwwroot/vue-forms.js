/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

"use strict"; // register VeeValidate components globally

Vue.component('validation-provider', VeeValidate.ValidationProvider);
Vue.component('validation-observer', VeeValidate.ValidationObserver); // include default french translations. The english translations are already included in the bundle

VeeValidate.localize('fr', {
  "code": "fr",
  "messages": {
    "alpha": "Le champ {_field_} ne peut contenir que des lettres",
    "alpha_num": "Le champ {_field_} ne peut contenir que des caractères alpha-numériques",
    "alpha_dash": "Le champ {_field_} ne peut contenir que des caractères alpha-numériques, tirets ou soulignés",
    "alpha_spaces": "Le champ {_field_} ne peut contenir que des lettres ou des espaces",
    "between": "Le champ {_field_} doit être compris entre {min} et {max}",
    "confirmed": "Le champ {_field_} ne correspond pas",
    "digits": "Le champ {_field_} doit être un nombre entier de {length} chiffres",
    "dimensions": "Le champ {_field_} doit avoir une taille de {width} pixels par {height} pixels",
    "email": "Le champ {_field_} doit être une adresse e-mail valide",
    "excluded": "Le champ {_field_} doit être une valeur valide",
    "ext": "Le champ {_field_} doit être un fichier valide",
    "image": "Le champ {_field_} doit être une image",
    "integer": "Le champ {_field_} doit être un entier",
    "length": "Le champ {_field_} doit contenir {length} caractères",
    "max_value": "Le champ {_field_} doit avoir une valeur de {max} ou moins",
    "max": "Le champ {_field_} ne peut pas contenir plus de {length} caractères",
    "mimes": "Le champ {_field_} doit avoir un type MIME valide",
    "min_value": "Le champ {_field_} doit avoir une valeur de {min} ou plus",
    "min": "Le champ {_field_} doit contenir au minimum {length} caractères",
    "numeric": "Le champ {_field_} ne peut contenir que des chiffres",
    "oneOf": "Le champ {_field_} doit être une valeur valide",
    "regex": "Le champ {_field_} est invalide",
    "required": "Le champ {_field_} est obligatoire",
    "required_if": "Le champ {_field_} est obligatoire lorsque {target} possède cette valeur",
    "size": "Le champ {_field_} doit avoir un poids inférieur à {size}KB"
  }
}); // run init script

function initForm(app) {
  // run the vue-form init script provided in the OC admin ui
  var appScript = app.dataset.initScript;

  if (appScript) {
    var initFn = new Function(atob(appScript));
    initFn();
  } // register all vue components coming from the admin ui


  var components = {};
  var vueComponentsElements = app.querySelectorAll("[data-vf-name]");
  vueComponentsElements.forEach(function (x) {
    var name = x.dataset.vfName;
    var encodedScript = x.dataset.vfScript;

    if (encodedScript) {
      var script = atob(encodedScript);
      var getVueObject = new Function("\n        var component = ".concat(script, ";\n        Object.assign(component, {name: '").concat(name, "' ,template: '#").concat(name, "-tmpl', props: ['obs-invalid', 'obs-validated', 'obs-handle-submit', 'obs-validate']});\n        return Vue.component('").concat(name, "', component);\n        "));
      components[name] = getVueObject();
    }
  }); // register the vue app

  new Vue({
    el: app,
    vuetify: new Vuetify({}),
    methods: {
      handleSubmit: function handleSubmit() {
        var observer = this.$refs.obs;
        var valid = observer.validate();

        if (valid) {
          var action = this.$refs.form.$attrs.action;
          var serializedForm = $("#" + this.$refs.form.$attrs.id).serialize();
          console.log(serializedForm);
          $.ajax({
            type: "POST",
            url: action,
            data: serializedForm,
            cache: false,
            dataType: "json",
            success: function success(data) {
              // if there are validation errors on the form, display them.
              if (data.validationError) {
                var errors = data.errors;
                console.log(errors);
                observer.setErrors(errors);
              } // if the server sends a redirect, reload the window


              if (data.redirect) {
                window.location.href = data.redirect;
              } //TODO: Handle default success case, maybe show some

            },
            error: function error(xhr) {
              // todo: handle this case gracefully, usually in the case of server error and not validation error
              var data = xhr.responseJSON;
              console.log("error", data);
            }
          });
        }
      }
    }
  }); //let $form = $(form);
  //// parse the form with unobtrusive library 
  //$.validator.unobtrusive.parse($form);
  //$form.submit(function (event) {        
  //    if ($form.valid()) {
  //      // form has been validated by jQuery validation
  //      event.preventDefault();
  //      event.stopPropagation();
  //      // disable elements that have the data-disable-submit attribute
  //      const toDisable = form.querySelectorAll("[data-disable-submit='true']");
  //      toDisable.forEach(x => x.setAttribute('disabled', true));
  //      const serializedForm = $form.serialize();
  //      // Post to the form controller
  //      $.ajax({
  //        type: "POST",
  //        url: form.action,
  //        data: serializedForm, 
  //        cache: false,
  //        dataType: "json",
  //        success: function (data) {
  //          if (data.validationError) {
  //            // Server side validation can occur, form is re-rendered
  //            $form.replaceWith(data.html);
  //            // need to reparse the form
  //            initForm(document.getElementById(formId));
  //            //TODO: focus on first error or validation summary
  //          }
  //          // if the server sends a redirect, reload the window
  //          if (data.redirect) {
  //            window.location.href = data.redirect;
  //          }
  //          //TODO: Handle default success case, maybe show some
  //        },
  //        error: function (xhr) {
  //          // todo: handle this case gracefully, usually in the case of server error.
  //          const data = xhr.responseJSON;
  //          console.log("error", data);
  //        }
  //      });
  //    }
  //  }
  //);
} // look for all ajax forms on load and initialize them


document.querySelectorAll(".vue-form").forEach(initForm);